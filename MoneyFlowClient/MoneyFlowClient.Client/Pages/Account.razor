@page "/account"
@inject NavigationManager Navigation
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using System.Text.Json
@using System.Text.Json.Serialization
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime

<link href="css/account.css" rel="stylesheet" />

<style>
    :root {
        --primary-color: #2e86de;
        --sidebar-width: 110px;
        --header-height: 70px;
        --card-shadow: 0 2px 10px rgba(0, 0, 0, 0.08);
        --border-color: #eae6e6;
    }

    body {
        margin: 0;
        font-family: 'Inter', sans-serif;
        background-color: #f8f9fd;
        color: #000000;
    }

    /* Общая структура */
    .screen {
        display: grid;
        grid-template-columns: var(--sidebar-width) 1fr;
        grid-template-rows: var(--header-height) 1fr;
        min-height: 100vh;
    }

    .header {
        grid-column: 2;
        grid-row: 1;
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0 25px;
        background: #ffffff;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        z-index: 100;
        height: var(--header-height);
    }

    .logo {
        font-size: 24px;
        font-weight: 700;
        color: var(--primary-color);
    }

        grid-column: 1;
        grid-row: 1 / span 2;
        background: #ffffff;
        box-shadow: 1px 0 3px rgba(0, 0, 0, 0.1);
        padding-top: 15px;
        display: flex;
        flex-direction: column;
        align-items: center;
        z-index: 90;
    }

    .sidebar-item {
        width: 100%;
        padding: 25px 0;
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 10px;
        cursor: pointer;
        font-size: 12px;
        color: #555;
        transition: all 0.2s;
    }

        .sidebar-item:hover {
            background: #f5f7ff;
        }

        .sidebar-item.active {
            color: var(--primary-color);
            background: #f0f4ff;
        }

        .sidebar-item img {
            width: 60px;
            height: 60px;
        }

    .account-content {
        grid-column: 2;
        grid-row: 2;
        padding: 30px;
        background-color: #f8f9fd;
    }

    .account-card {
        background: white;
        border-radius: 10px;
        padding: 20px;
        margin-bottom: 20px;
        box-shadow: var(--card-shadow);
    }

    .account-header {
        font-size: 18px;
        font-weight: 700;
        margin-bottom: 15px;
    }

    .accounts-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 15px;
        margin-top: 20px;
    }

    .account-item {
        background: white;
        border-radius: 10px;
        padding: 15px;
        box-shadow: var(--card-shadow);
        display: flex;
        align-items: center;
    }

    .account-icon {
        font-size: 24px;
        margin-right: 15px;
    }

    .account-details {
        flex: 1;
    }

    .account-amount {
        font-weight: 700;
        font-size: 16px;
    }

    .account-description {
        color: #666;
        font-size: 14px;
    }

    .user-panel {
        display: flex;
        align-items: center;
        gap: 15px;
    }

    .balance {
        text-align: right;
    }

    .balance-label {
        display: block;
        font-size: 12px;
        color: #666;
    }

    .balance-amount {
        font-size: 16px;
        font-weight: 700;
    }

    .avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        overflow: hidden;
        cursor: pointer;
        background: #eee;
        display: flex;
        align-items: center;
        justify-content: center;
    }

        .avatar img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

    .account-actions {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 15px;
        margin-top: 20px;
    }

    .action-item {
        background: white;
        border-radius: 10px;
        padding: 15px;
        box-shadow: var(--card-shadow);
        display: flex;
        align-items: center;
        cursor: pointer;
        transition: all 0.2s;
    }

        .action-item:hover {
            background: #f5f7ff;
        }

        .action-item.logout {
            color: #e74c3c;
        }

    .action-icon {
        margin-right: 10px;
        font-size: 20px;
    }

    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.3);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
        backdrop-filter: blur(2px);
    }

    .modal-content {
        background: white;
        padding: 25px;
        border-radius: 12px;
        width: 400px;
        max-width: 90%;
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
    }

    .modal-header {
        font-size: 20px;
        font-weight: 600;
        margin-bottom: 20px;
        color: var(--primary-color);
    }

    .modal-body {
        display: flex;
        flex-direction: column;
        gap: 15px;
    }

    .form-group {
        display: flex;
        flex-direction: column;
        gap: 8px;
    }

    .form-label {
        font-size: 14px;
        color: #555;
    }

    .form-input {
        padding: 10px 12px;
        border: 1px solid var(--border-color);
        border-radius: 6px;
        font-size: 14px;
        transition: all 0.2s;
    }

        .form-input:focus {
            border-color: var(--primary-color);
            outline: none;
            box-shadow: 0 0 0 2px rgba(46, 134, 222, 0.2);
        }

    .form-select {
        padding: 10px 12px;
        border: 1px solid var(--border-color);
        border-radius: 6px;
        font-size: 14px;
        background-color: white;
        cursor: pointer;
    }

        .form-select:focus {
            border-color: var(--primary-color);
            outline: none;
            box-shadow: 0 0 0 2px rgba(46, 134, 222, 0.2);
        }

    .modal-footer {
        display: flex;
        justify-content: flex-end;
        gap: 12px;
        margin-top: 20px;
    }

    .btn {
        padding: 10px 18px;
        border-radius: 6px;
        font-size: 14px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s;
        border: none;
    }

    .btn-secondary {
        background: #f0f2f5;
        color: #555;
    }

        .btn-secondary:hover {
            background: #e5e7eb;
        }

    .btn-primary {
        background: var(--primary-color);
        color: white;
    }

        .btn-primary:hover {
            background: #2674c8;
        }

    .add-card-btn {
        background: var(--primary-color);
        color: white;
        border: none;
        padding: 8px 16px;
        border-radius: 6px;
        cursor: pointer;
        font-size: 14px;
        font-weight: 500;
        float: right;
        transition: all 0.2s;
    }

        .add-card-btn:hover {
            background: #2674c8;
        }

    .btn-cancel {
        background: #f0f0f0;
        border: none;
        padding: 8px 16px;
        border-radius: 4px;
        cursor: pointer;
    }

    .btn-confirm {
        background: var(--primary-color);
        color: white;
        border: none;
        padding: 8px 16px;
        border-radius: 4px;
        cursor: pointer;
    }

   
</style>

<div class="screen">
    <div class="header">
        <div class="logo" @onclick="NavigateToMain">MoneyFlow</div> 
        <div class="user-panel">
            <div class="balance">
                <span class="balance-label">Баланс</span>
                <span class="balance-amount">@(currentBalance?.ToString("N0") ?? "0") ₽</span>
            </div>

            <div class="avatar" @onclick="NavigateToAccount">
                <img src="@_avatarUrl" alt="Аватар"
                     onerror="this.src='https://ymzpnhfzzfkopqvrudiz.supabase.co/storage/v1/object/sign/avatar/avatar.svg?token=eyJraWQiOiJzdG9yYWdlLXVybC1zaWduaW5nLWtleV9jNTBhNTJhOS1kMzYyLTRjMWUtOGMyNi0wNDM3Yjg2ZTIwYzkiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJhdmF0YXIvYXZhdGFyLnN2ZyIsImlhdCI6MTc1MDY3ODQ4NywiZXhwIjoxNzgyMjE0NDg3fQ.2MejLtqa8h0_90wYdz_Z4g4WORZnx2itSRRnm4CzpR8'" />
            </div>
        </div>
    </div>

    <div class="sidebar">
        <div class="sidebar-item" @onclick="NavigateToHistory">
            <img src="img/history-icon.svg" alt="История" />
            <span>История</span>
        </div>
        <div class="sidebar-item" @onclick="NavigateToTransfers">
            <img src="img/transfers-icon.svg" alt="Переводы" />
            <span>Переводы</span>
        </div>
        <div class="sidebar-item" @onclick="NavigateToInvestments">
            <img src="img/investments-icon.svg" alt="Инвестиции" />
            <span>Инвестиции</span>
        </div>

        @if (isAdmin)
        {
            <div class="sidebar-item" @onclick="NavigateToAdmin">
                <img src="img/admin-icon.svg" alt="Админ-панель" />
                <span>Админ-панель</span>
            </div>
        }
    </div>

    <!-- Основное содержимое страницы Account -->
    <div class="account-content">
        <!-- Имя пользователя -->
        <div class="account-card">
            <div style="display: flex; align-items: center;">
                <div class="avatar" style="width: 60px; height: 60px; margin-right: 20px;">
                    <img src="@_avatarUrl" alt="Аватар"
                         onerror="this.src='https://ymzpnhfzzfkopqvrudiz.supabase.co/storage/v1/object/sign/avatar/avatar.svg?token=eyJraWQiOiJzdG9yYWdlLXVybC1zaWduaW5nLWtleV9jNTBhNTJhOS1kMzYyLTRjMWUtOGMyNi0wNDM3Yjg2ZTIwYzkiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJhdmF0YXIvYXZhdGFyLnN2ZyIsImlhdCI6MTc1MDY3ODQ4NywiZXhwIjoxNzgyMjE0NDg3fQ.2MejLtqa8h0_90wYdz_Z4g4WORZnx2itSRRnm4CzpR8'" />

                </div>
                <div>
                    <h2 style="margin: 0; font-size: 20px;">@UserName</h2>
                </div>
            </div>
        </div>

        <!-- Блок счетов -->
        <div class="account-card">
            <div class="account-header">
                Ваши счета
                <button class="add-card-btn" @onclick="ShowAddCardModal">+ Добавить карту</button>
            </div>

            <div class="accounts-grid">
                @if (isLoading)
                {
                    <div>Загрузка...</div>
                }
                else if (userCards.Count == 0)
                {
                    <div>У вас пока нет карт</div>
                }
                else
                {
                    @foreach (var card in userCards)
                    {
                        <div class="account-item">
                            <div class="account-icon">💳</div>
                            <div class="account-details">
                                <div class="account-amount">@card.Amount.ToString("N2") ₽</div>
                                <div class="account-description">@card.Description</div>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>

        <!-- Модальное окно добавления карты -->
        @if (showAddCardModal)
        {
            <div class="modal-overlay" @onclick="HideAddCardModal">
                <div class="modal-content" @onclick:stopPropagation>
                    <div class="modal-header">Добавить новую карту</div>
                    <div class="modal-body">
                        <div class="form-group">
                            <label class="form-label">Название карты</label>
                            <input class="form-input" type="text" @bind="newCardDescription" placeholder="Например: Основная карта" />
                        </div>

                        <div class="form-group">
                            <label class="form-label">Начальный баланс</label>
                            <input class="form-input" type="number" @bind="newCardAmount" placeholder="0.00" />
                        </div>

                    </div>

                    <div class="modal-footer">
                        <button class="btn btn-secondary" @onclick="HideAddCardModal">Отмена</button>
                        <button class="btn btn-primary" @onclick="AddNewCard">Добавить карту</button>
                    </div>
                </div>
            </div>
        }

        <!-- Блок выгоды -->
        <div class="account-card">
            <div style="display: flex; align-items: center;">
                <div style="font-size: 24px; margin-right: 15px;">📈</div>
                <div>
                    Ваша выгода в инвестициях за май 2025: <strong>3 800 ₽</strong>
                </div>
            </div>
        </div>

        <!-- Действия -->
        <div class="account-actions">
            <div class="action-item" @onclick="OpenSettings">
                <div class="action-icon">⚙️</div>
                <div>Настройки</div>
            </div>
            <div class="action-item logout" @onclick="Logout">
                <img src="img/logout-icon.svg" />
                <div style="margin-left: 10px;">Выйти из аккаунта</div>
            </div>
        </div>
    </div>
</div>

@code {

    private decimal? currentBalance;
    private string? userId;
    private bool isAdmin = false;
    private ClaimsPrincipal? user;
    private string UserName;
    private decimal InvestmentAmount;
    private decimal InvestmentProfit;
    private string _avatarUrl = "https://ymzpnhfzzfkopqvrudiz.supabase.co/storage/v1/object/sign/avatar/avatar.svg?token=eyJraWQiOiJzdG9yYWdlLXVybC1zaWduaW5nLWtleV9jNTBhNTJhOS1kMzYyLTRjMWUtOGMyNi0wNDM3Yjg2ZTIwYzkiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJhdmF0YXIvYXZhdGFyLnN2ZyIsImlhdCI6MTc1MDY3NzcyNSwiZXhwIjoxNzgyMjEzNzI1fQ.nooWtvyI88n56xp0E0cANLdW2WznFL-9HpRnOuQVMUA"; // URL по умолчанию
    private string? _userEmail;
    private string? _userName;
    private string? _email;
    private List<Budget> userCards = new();
    private bool isLoading = true;
    private bool showAddCardModal = false;
    private string newCardDescription = "";
    private decimal newCardAmount = 0;

    public class UserData
    {
        public string Name { get; set; }
        public decimal Investments { get; set; }
        public decimal MonthlyProfit { get; set; }
        public string Email { get; set; }
        public string AvatarUrl { get; set; }
    }
 
    [Inject]
    private Supabase.Client? Supabase { get; set; }

 
    // Методы навигации
    private void NavigateToHistory() => Navigation.NavigateTo("/history");
    private void NavigateToTransfers() => Navigation.NavigateTo("/transfers");
    private void NavigateToInvestments() => Navigation.NavigateTo("/investments");
    private void NavigateToAdmin() => Navigation.NavigateTo("/admin");
    private void OpenSettings() => Navigation.NavigateTo("/settings");
    private void NavigateToMain() => Navigation.NavigateTo("/main");
    private void NavigateToAccount() => Navigation.NavigateTo("/account");

    private async Task Logout()
    {
        if (AuthenticationStateProvider is CustomAuthStateProvider customProvider)
        {
            await customProvider.LogoutAsync();
        }
        Navigation.NavigateTo("/login");
    }
     

    //логика 
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;
        await ProcessAuthState(authState);
        
        // Загрузка данных пользователя
        var userData = await GetCurrentUserAsync();
        if (userData != null)
        {
            UserName = userData.Name;
            InvestmentAmount = userData.Investments;
            InvestmentProfit = userData.MonthlyProfit;
        }
        await LoadUserCards();
    }

    private async Task LoadUserCards()
    {
        isLoading = true;
        try
        {
            var response = await Http.GetAsync($"api/UserAccount/{userId}/cards");
            if (response.IsSuccessStatusCode)
            {
                userCards = await response.Content.ReadFromJsonAsync<List<Budget>>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка загрузки карт: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
    private void ShowAddCardModal() => showAddCardModal = true;
    private void HideAddCardModal() => showAddCardModal = false;

    private async Task AddNewCard()
    {
        try
        {
            var newCard = new
            {
                Description = newCardDescription,
                InitialAmount = newCardAmount
            };

            var response = await Http.PostAsJsonAsync($"api/UserAccount/{userId}/add-card", newCard);

            if (response.IsSuccessStatusCode)
            {
                await LoadUserCards();
                HideAddCardModal();
                newCardDescription = "";
                newCardAmount = 0;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка добавления карты: {ex.Message}");
        }
    }

    private async Task ProcessAuthState(AuthenticationState authState)
    {
        user = authState.User;

        if (user.Identity is { IsAuthenticated: true })
        {
            userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            _userEmail = user.FindFirst(ClaimTypes.Email)?.Value;

            var roleClaim = user.FindFirst(ClaimTypes.Role)?.Value;
            isAdmin = roleClaim == "1";

            await JSRuntime.InvokeVoidAsync("console.log",
                $"User ID: {userId}, Role: {roleClaim}, IsAdmin: {isAdmin}");

            if (!string.IsNullOrEmpty(userId))
            {
                await LoadUserBalance();
                await LoadUserData();
            }
        }
        else
        {
            isAdmin = false;
            await JSRuntime.InvokeVoidAsync("console.log", "Пользователь не авторизирован");
        }

        StateHasChanged();
    }
    private async Task LoadUserData()
    {
        try
        {
            var response = await Http.GetAsync($"api/UserAccount/{userId}/with-avatar");
            if (response.IsSuccessStatusCode)
            {
                var userData = await response.Content.ReadFromJsonAsync<UserData>();

                _userName = userData?.Name ?? string.Empty;
                _email = userData?.Email ?? string.Empty;

                _avatarUrl = userData?.AvatarUrl ?? "https://placehold.co/40";

                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка загрузки данных пользователя: {ex.Message}");
            _avatarUrl = "https://placehold.co/40";
            _userName = string.Empty;
            _email = string.Empty;
            StateHasChanged();
        }
    }

    private async Task<bool> CheckIfAvatarExists(string fileName)
    {
        if (Supabase == null) return false;

        try
        {
            var list = await Supabase.Storage
                .From("avatar")
                .List();

            return list.Any(f => f.Name == fileName);
        }
        catch
        {
            return false;
        }
    }


    private async Task LoadUserBalance()
    {
        try
        {
            var response = await Http.GetAsync($"api/Budget/users/{userId}/cards-total");
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadFromJsonAsync<CardsTotalResponse>();
                currentBalance = content?.Total ?? 0;
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Ошибка загрузки баланса: {ex.Message}");
        }
        finally
        {
            StateHasChanged();
        }
    }

    private class CardsTotalResponse
    {
        public decimal Total { get; set; }
    }



    private async Task<UserData> GetCurrentUserAsync()
    {
        try
        {
            var response = await Http.GetAsync($"api/UserAccount/{userId}");
            if (response.IsSuccessStatusCode)
            {
                return await response.Content.ReadFromJsonAsync<UserData>();
            }
            await JSRuntime.InvokeVoidAsync("console.error", $"Ошибка: {response.StatusCode}");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Ошибка: {ex.Message}");
        }
        return null;
    }

}