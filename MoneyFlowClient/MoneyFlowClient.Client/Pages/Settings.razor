@page "/settings"
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using System.Security.Claims
@using System.Text.Json

<style>
    /* Стили шапки и сайдбара (как в MainScreen) */
    :root {
    --primary-color: #2e86de;
    --sidebar-width: 110px;
    --header-height: 70px;
    --card-shadow: 0 2px 10px rgba(0, 0, 0, 0.08);
    --border-color: #eae6e6;
    }

    body {
    margin: 0;
    font-family: 'Inter', sans-serif;
    background-color: #f8f9fd;
    color: #000000;
    }

    .screen {
    display: grid;
    grid-template-columns: var(--sidebar-width) 1fr;
    grid-template-rows: var(--header-height) 1fr;
    min-height: 100vh;
    }

    /* Шапка */
    .header {
    grid-column: 2;
    grid-row: 1;
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0 25px;
    background: #ffffff;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    height: var(--header-height);
    }

    .logo {
    font-size: 24px;
    font-weight: 700;
    color: var(--primary-color);
    }

    /* Боковая панель */
    .sidebar {
    grid-column: 1;
    grid-row: 1 / span 2;
    background: #ffffff;
    box-shadow: 1px 0 3px rgba(0, 0, 0, 0.1);
    padding-top: 15px;
    display: flex;
    flex-direction: column;
    align-items: center;
    }

    .sidebar-item {
    width: 100%;
    padding: 25px 0;
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 10px;
    cursor: pointer;
    font-size: 12px;
    color: #555;
    transition: all 0.2s;
    }

    .sidebar-item:hover {
    background: #f5f7ff;
    }

    .sidebar-item.active {
    color: var(--primary-color);
    background: #f0f4ff;
    }

    .sidebar-item img {
    width: 60px;
    height: 60px;
    }

    /* Панель пользователя */
    .user-panel {
    display: flex;
    align-items: center;
    gap: 15px;
    }

    .balance {
    text-align: right;
    }

    .balance-label {
    display: block;
    font-size: 12px;
    color: #666;
    }

    .balance-amount {
    font-size: 16px;
    font-weight: 700;
    }

    .avatar {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    overflow: hidden;
    cursor: pointer;
    background: #eee;
    display: flex;
    align-items: center;
    justify-content: center;
    }

    .avatar img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    }

    /* Стили для страницы настроек */
    .settings-container {
    grid-column: 2;
    grid-row: 2;
    padding: 30px;
    background-color: #f8f9fd;
    }

    .settings-card {
    background: white;
    border-radius: 10px;
    padding: 25px;
    margin-bottom: 20px;
    box-shadow: var(--card-shadow);
    }

    .settings-header {
    font-size: 20px;
    font-weight: 600;
    margin-bottom: 25px;
    color: var(--primary-color);
    }

    .form-group {
    margin-bottom: 20px;
    }

    .form-label {
    display: block;
    margin-bottom: 8px;
    font-weight: 500;
    }

    .form-control {
    width: 100%;
    padding: 10px 15px;
    border: 1px solid var(--border-color);
    border-radius: 6px;
    font-size: 16px;
    }

    .btn-primary {
    background-color: var(--primary-color);
    color: white;
    border: none;
    padding: 12px 25px;
    border-radius: 6px;
    cursor: pointer;
    font-size: 16px;
    transition: background 0.2s;
    }

    .btn-primary:hover {
    background-color: #1a6fc9;
    }

    .avatar-upload {
    display: flex;
    align-items: center;
    gap: 20px;
    }

    .avatar-preview {
    width: 80px;
    height: 80px;
    border-radius: 50%;
    object-fit: cover;
    }

    .file-input {
    display: none;
    }

    .danger-zone {
    margin-top: -10px;
    }

    .btn-danger {
    background-color: #ff6b6b;
    color: white;
    border: none;
    padding: 10px 20px;
    border-radius: 6px;
    cursor: pointer;
    }
</style>

<div class="screen">
    <!-- Шапка (как в MainScreen) -->
    <div class="header">
        <div class="logo" @onclick="NavigateToMain">MoneyFlow</div>
        <div class="user-panel">
            <div class="balance">
                <span class="balance-label">Баланс</span>
                <span class="balance-amount">@(currentBalance?.ToString("N0") ?? "0") Р</span>
            </div>
            <div class="avatar" @onclick="NavigateToAccount">
                <img src="@_avatarUrl" alt="Аватар" />
            </div>
        </div>
    </div>

    <!-- Боковая панель (как в MainScreen) -->
    <div class="sidebar">
        <div class="sidebar-item" @onclick="NavigateToHistory">
            <img src="img/history-icon.svg" alt="История" />
            <span>История</span>
        </div>
        <div class="sidebar-item" @onclick="NavigateToTransfers">
            <img src="img/transfers-icon.svg" alt="Переводы" />
            <span>Переводы</span>
        </div>
        <div class="sidebar-item" @onclick="NavigateToInvestments">
            <img src="img/investments-icon.svg" alt="Инвестиции" />
            <span>Инвестиции</span>
        </div>

        @if (isAdmin)
        {
            <div class="sidebar-item" @onclick="NavigateToAdmin">
                <img src="img/admin-icon.svg" alt="Админ-панель" />
                <span>Админ-панель</span>
            </div>
        }
    </div>

    <!-- Основной контент страницы настроек -->
    <div class="settings-container">
        <!-- Карточка профиля -->
        <div class="settings-card">
            <div class="settings-header">Настройки профиля</div>

            <!-- Аватар -->
            <div class="form-group">
                <label class="form-label">Аватар</label>
                <div class="avatar-upload">
                    <img src="@_avatarUrl" class="avatar-preview" />
                    <InputFile id="avatar-upload" class="btn-primary"
                    OnChange="HandleAvatarUpload" accept="image/*">
                        Выбрать файл
                    </InputFile>
                </div>
            </div>

            <!-- Имя -->
            <div class="form-group">
                <label class="form-label">Имя</label>
                <input type="text" class="form-control" @bind="_userName" />
            </div>

            <!-- Email -->
            <div class="form-group">
                <label class="form-label">Email</label>
                <input type="email" class="form-control" @bind="_email" />
            </div>

            <!-- Пароль -->
            <div class="form-group">
                <label class="form-label">Новый пароль</label>
                <input type="password" class="form-control" @bind="_newPassword"
                placeholder="Оставьте пустым, если не нужно менять" />
            </div>

            <!-- Подтверждение пароля -->
            <div class="form-group">
                <label class="form-label">Подтвердите пароль</label>
                <input type="password" class="form-control" @bind="_confirmPassword" />
            </div>

            <button class="btn-primary" @onclick="SaveProfile">Сохранить изменения</button>
        </div>

        <!-- Опасная зона -->
        <div class="settings-card">
            <div class="settings-header">Опасная зона</div>

            <div class="danger-zone">
                <button class="btn-danger" @onclick="ShowDeleteConfirmation">
                    Удалить аккаунт
                </button>

                @if (_showDeleteConfirmation)
                {
                    <div style="margin-top: 15px;">
                        <p>Вы уверены? Это действие нельзя отменить.</p>
                        <button class="btn-danger" @onclick="DeleteAccount">Подтвердить удаление</button>
                        <button class="btn-primary" @onclick="HideDeleteConfirmation"
                        style="margin-left: 10px;">
                            Отмена
                        </button>
                    </div>
                }

            </div>

        </div>
    </div>
</div>

@code {
    private decimal? currentBalance;
    private string? userId;
    private bool isAdmin = false;
    private ClaimsPrincipal? user;
    private string _avatarUrl = "img/avatar.svg";
    private Stream _avatarStream;
    private string _userName;
    private string _email;
    private string _newPassword = "";
    private string _confirmPassword = "";
    private bool _showDeleteConfirmation = false;

    private void ShowDeleteConfirmation() => _showDeleteConfirmation = true;
    private void HideDeleteConfirmation() => _showDeleteConfirmation = false;


    // Методы навигации
    private void NavigateToMain() => Navigation.NavigateTo("/main");
    private void NavigateToHistory() => Navigation.NavigateTo("/history");
    private void NavigateToTransfers() => Navigation.NavigateTo("/transfers");
    private void NavigateToInvestments() => Navigation.NavigateTo("/investments");
    private void NavigateToAdmin() => Navigation.NavigateTo("/admin");
    private void NavigateToAccount() => Navigation.NavigateTo("/account");

    public class UserUpdateModel
    {
        public string UserId { get; set; }
        public string Name { get; set; }
        public string Email { get; set; }
        public string NewPassword { get; set; }
        public Stream AvatarStream { get; set; }
    }

    public class Budget { public decimal Amount { get; set; } }
    public class UserData
    {
        public string Name { get; set; }
        public string Email { get; set; }
        public string AvatarUrl { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;
        await ProcessAuthState(authState);

        // Загрузка данных пользователя
        await LoadUserData();
    }

    private async Task ProcessAuthState(AuthenticationState authState)
    {
        user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            var roleClaim = user.FindFirst(ClaimTypes.Role)?.Value;
            isAdmin = roleClaim == "1";

            if (!string.IsNullOrEmpty(userId))
                await LoadUserBalance();
        }
    }

    private async Task LoadUserBalance()
    {
        try
        {
            var response = await Http.GetAsync($"api/Budget/users/{userId}");
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
                var budget = JsonSerializer.Deserialize<Budget>(content, options);
                currentBalance = budget?.Amount;
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", ex.Message);
        }
    }

    private async Task LoadUserData()
    {
        try
        {
            var response = await Http.GetAsync($"api/UserAccount/{userId}");
            if (response.IsSuccessStatusCode)
            {
                var userData = await response.Content.ReadFromJsonAsync<UserData>();
                _userName = userData?.Name ?? _userName;
                _email = userData?.Email ?? _email;
                _avatarUrl = userData?.AvatarUrl ?? _avatarUrl;
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", ex.Message);
        }
    }

    private async Task HandleAvatarUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null && file.Size > 0)
        {
            if (file.Size > 5 * 1024 * 1024)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Максимальный размер файла - 5MB");
                return;
            }

            var buffer = new byte[file.Size];
            await file.OpenReadStream().ReadAsync(buffer);
            _avatarUrl = $"data:{file.ContentType};base64,{Convert.ToBase64String(buffer)}";
            _avatarStream = new MemoryStream(buffer);
            StateHasChanged();
        }
    }

    private async Task SaveProfile()
    {
        try
        {
            if (!string.IsNullOrEmpty(_newPassword) && _newPassword != _confirmPassword)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Пароли не совпадают");
                return;
            }

            var updateModel = new
            {
                UserId = int.Parse(userId), // Преобразуем string в int
                Name = _userName,
                Email = _email,
                NewPassword = _newPassword
            };

            var response = await Http.PostAsJsonAsync("api/UserAccount/update", updateModel);

            if (response.IsSuccessStatusCode)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Профиль успешно обновлен");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                await JSRuntime.InvokeVoidAsync("alert", $"Ошибка: {error}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Ошибка: {ex.Message}");
        }
    }

    private async Task DeleteAccount()
    {
        try
        {
            var confirmed = await JSRuntime.InvokeAsync<bool>("confirm",
                "Вы уверены, что хотите удалить аккаунт? Это действие нельзя отменить!");

            if (!confirmed) return;

            var response = await Http.DeleteAsync($"api/UserAccount/{userId}");

            if (response.IsSuccessStatusCode)
            {
                if (AuthenticationStateProvider is CustomAuthStateProvider authProvider)
                {
                    await authProvider.LogoutAsync();
                }
                Navigation.NavigateTo("/login");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                await JSRuntime.InvokeVoidAsync("alert", $"Ошибка: {error}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Ошибка: {ex.Message}");
        }
    }


}
