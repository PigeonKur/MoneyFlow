@page "/investments"
@inject NavigationManager Navigation
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using System.Text.Json
@using System.Text.Json.Serialization
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime

<link href="css/account.css" rel="stylesheet" />
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<style>
	:root {
		--primary-color: #2e86de;
		--sidebar-width: 110px;
		--header-height: 70px;
		--card-shadow: 0 2px 10px rgba(0, 0, 0, 0.08);
		--border-color: #eae6e6;
	}

	body {
		margin: 0;
		font-family: 'Inter', sans-serif;
		background-color: #f8f9fd;
		color: #000000;
	}

	/* Общая структура */
	.screen {
		display: grid;
		grid-template-columns: var(--sidebar-width) 1fr;
		grid-template-rows: var(--header-height) 1fr;
		min-height: 100vh;
	}

	.header {
		grid-column: 2;
		grid-row: 1;
		display: flex;
		justify-content: space-between;
		align-items: center;
		padding: 0 25px;
		background: #ffffff;
		box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
		z-index: 100;
		height: var(--header-height);
	}

	.main-content {
		grid-column: 2;
		grid-row: 2;
		padding: 15px 20px;
		background-color: #f8f9fd;
		margin-top: 0px;
		margin-left: 35px;
	}

	.logo {
		font-size: 24px;
		font-weight: 700;
		color: var(--primary-color);
	}

	.sidebar {
		grid-column: 1;
		grid-row: 1 / span 2;
		background: #ffffff;
		box-shadow: 1px 0 3px rgba(0, 0, 0, 0.1);
		padding-top: 15px;
		display: flex;
		flex-direction: column;
		align-items: center;
		z-index: 90;
	}

	.sidebar-item {
		width: 100%;
		padding: 25px 0;
		display: flex;
		flex-direction: column;
		align-items: center;
		gap: 10px;
		cursor: pointer;
		font-size: 12px;
		color: #555;
		transition: all 0.2s;
	}

		.sidebar-item:hover {
			background: #f5f7ff;
		}

		.sidebar-item.active {
			color: var(--primary-color);
			background: #f0f4ff;
		}

		.sidebar-item img {
			width: 60px;
			height: 60px;
		}

	.account-content {
		grid-column: 2;
		grid-row: 2;
		padding: 30px;
		background-color: #f8f9fd;
	}

	.account-card {
		background: white;
		border-radius: 10px;
		padding: 20px;
		margin-bottom: 20px;
		box-shadow: var(--card-shadow);
	}

	.account-header {
		font-size: 18px;
		font-weight: 700;
		margin-bottom: 15px;
	}

	.accounts-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
		gap: 15px;
		margin-top: 20px;
	}

	.account-item {
		background: white;
		border-radius: 10px;
		padding: 15px;
		box-shadow: var(--card-shadow);
		display: flex;
		align-items: center;
	}

	.account-icon {
		font-size: 24px;
		margin-right: 15px;
	}

	.account-details {
		flex: 1;
	}

	.account-amount {
		font-weight: 700;
		font-size: 16px;
	}

	.account-description {
		color: #666;
		font-size: 14px;
	}

	.user-panel {
		display: flex;
		align-items: center;
		gap: 15px;
	}

	.balance {
		text-align: right;
	}

	.balance-label {
		display: block;
		font-size: 12px;
		color: #666;
	}

	.balance-amount {
		font-size: 16px;
		font-weight: 700;
	}

	.avatar {
		width: 40px;
		height: 40px;
		border-radius: 50%;
		overflow: hidden;
		cursor: pointer;
		background: #eee;
		display: flex;
		align-items: center;
		justify-content: center;
	}

		.avatar img {
			width: 100%;
			height: 100%;
			object-fit: cover;
		}

	.page-title {
		font-size: 22px;
		margin: 0 0 35px 0;
		color: #000;
		font-weight: 700;
	}

	.investments-row {
		display: flex;
		gap: 20px;
		margin-bottom: 20px;
	}

	.investment-card {
		background: white;
		border-radius: 20px;
		padding: 25px;
		box-shadow: var(--card-shadow);
		flex: 1;
	}

	.wide-card {
		flex: 2;
	}

	.investment-card-header {
		display: flex;
		justify-content: space-between;
		align-items: center;
		margin-bottom: 20px;
	}

		.investment-card-header h2 {
			font-size: 23px;
			font-weight: 700;
			color: #333;
			margin: 0;
		}

	.period-selector select {
		padding: 6px 12px;
		border-radius: 5px;
		border: 1px solid #8a8484;
		background-color: white;
		font-size: 13px;
		font-weight: bold;
	}

	.chart-container {
		height: 300px;
		background: white;
		border-radius: 12px;
		box-shadow: 0px 1px 4px rgba(0, 0, 0, 0.08);
	}

	.chart-placeholder {
		width: 100%;
		height: 100%;
		display: flex;
		align-items: center;
		justify-content: center;
		background: linear-gradient(0deg, rgba(255,255,255,1) 0%, rgba(255,255,255,1) 100%);
	}

		.chart-placeholder img {
			max-width: 100%;
			max-height: 100%;
		}



	.stock-info, .transaction-info {
		display: flex;
		flex-direction: column;
	}

	.stock-name {
		font-size: 15px;
		color: #333;
	}

	.stock-price {
		font-size: 14px;
		font-weight: 500;
	}

		.stock-price.positive {
			color: #008000;
		}

		.stock-price.negative {
			color: #ff0000;
		}

	.transaction-profit {
		font-size: 14px;
		font-weight: 500;
	}

		.transaction-profit.positive {
			color: #008000;
		}

		.transaction-profit.negative {
			color: #ff0000;
		}

	.buy-button {
		padding: 8px 12px;
		background-color: #4CAF50;
		color: white;
		border: none;
		border-radius: 8px;
		font-size: 13px;
		cursor: pointer;
		transition: background-color 0.2s;
	}

		.buy-button:hover {
			background-color: #3e8e41;
		}


	.modal-overlay {
		position: fixed;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
		background: rgba(0, 0, 0, 0.5);
		display: flex;
		align-items: center;
		justify-content: center;
		z-index: 1000;
	}

	.modal-content {
		background: white;
		padding: 25px;
		border-radius: 12px;
		width: 400px;
		max-width: 90%;
	}

	.modal-header {
		font-size: 20px;
		margin-bottom: 20px;
		font-weight: 600;
	}

	.form-group {
		margin-bottom: 15px;
	}

	.form-label {
		display: block;
		margin-bottom: 5px;
		font-weight: 500;
	}

	.form-input {
		width: 100%;
		padding: 10px;
		border: 1px solid #ddd;
		border-radius: 6px;
	}

	.modal-actions {
		display: flex;
		justify-content: flex-end;
		gap: 10px;
		margin-top: 20px;
	}

	.btn {
		padding: 8px 16px;
		border-radius: 6px;
		cursor: pointer;
	}

	.btn-primary {
		background-color: var(--primary-color);
		color: white;
		border: none;
	}

	.btn-secondary {
		background-color: #f0f0f0;
		border: 1px solid #ddd;
	}

	.sell-button {
		background-color: #e74c3c;
		color: white;
		border: none;
		padding: 6px 12px;
		border-radius: 6px;
		font-size: 12px;
		margin-left: 10px;
	}

	.stock-item {
		display: flex;
		justify-content: space-between;
		align-items: center;
		padding: 15px;
		background: white;
		border-radius: 12px;
		box-shadow: 0px 1px 3px rgba(0, 0, 0, 0.08);
		margin-bottom: 10px;
	}

	.stock-info {
		display: flex;
		flex-direction: column;
	}

	.stock-name {
		font-size: 15px;
		color: #333;
		font-weight: 500;
	}

	.stock-price {
		font-size: 14px;
		font-weight: 500;
	}

		.stock-price.positive {
			color: #008000;
		}

		.stock-price.negative {
			color: #ff0000;
		}

	.buy-button {
		padding: 8px 12px;
		background-color: #4CAF50;
		color: white;
		border: none;
		border-radius: 8px;
		font-size: 13px;
		cursor: pointer;
		transition: background-color 0.2s;
	}

		.buy-button:hover {
			background-color: #3e8e41;
		}



	.investments-container {
		display: grid;
		grid-template-columns: 2fr 1fr; 
		grid-template-rows: auto auto; 
		gap: 20px;
		margin-bottom: 20px;
	}

	.charts-column {
		grid-column: 1;
		grid-row: 1 / span 2; 
		display: flex;
		flex-direction: column;
		gap: 20px;
	}

	.side-column {
		grid-column: 2;
		display: flex;
		flex-direction: column;
		gap: 20px;
	}

	.investment-card {
		background: white;
		border-radius: 20px;
		padding: 25px;
		box-shadow: var(--card-shadow);
		height: 100%;
		display: flex;
		flex-direction: column;
	}

	.stocks-list, .transactions-list {
		overflow-y: auto;
		max-height: 300px;
		flex-grow: 1;
		display: flex;
		flex-direction: column;
		gap: 15px;
		margin-top: 5px;
	}

	.stock-item, .transaction-item {
		display: flex;
		justify-content: space-between;
		align-items: center;
		padding: 15px;
		background: white;
		border-radius: 12px;
		box-shadow: 0px 1px 3px rgba(0, 0, 0, 0.08);
	}
</style>

<div class="screen">
	<div class="header">
		<div class="logo" @onclick="NavigateToMain">MoneyFlow</div>
		<div class="user-panel">
			<div class="balance">
				<span class="balance-label">Баланс</span>
				<span class="balance-amount">@(currentBalance?.ToString("N0") ?? "0") ₽</span>
			</div>

			<div class="avatar" @onclick="NavigateToAccount">
				<img src="@_avatarUrl" alt="Аватар"
					 onerror="this.src='https://ymzpnhfzzfkopqvrudiz.supabase.co/storage/v1/object/sign/avatar/avatar.svg?token=eyJraWQiOiJzdG9yYWdlLXVybC1zaWduaW5nLWtleV9jNTBhNTJhOS1kMzYyLTRjMWUtOGMyNi0wNDM3Yjg2ZTIwYzkiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJhdmF0YXIvYXZhdGFyLnN2ZyIsImlhdCI6MTc1MDY3ODQ4NywiZXhwIjoxNzgyMjE0NDg3fQ.2MejLtqa8h0_90wYdz_Z4g4WORZnx2itSRRnm4CzpR8'" />
			</div>
		</div>
	</div>

	<div class="sidebar">
		<div class="sidebar-item" @onclick="NavigateToHistory">
			<img src="img/history-icon.svg" alt="История" />
			<span>История</span>
		</div>
		<div class="sidebar-item" @onclick="NavigateToTransfers">
			<img src="img/transfers-icon.svg" alt="Переводы" />
			<span>Переводы</span>
		</div>
		<div class="sidebar-item active" @onclick="NavigateToInvestments">
			<img src="img/investments-icon.svg" alt="Инвестиции" />
			<span>Инвестиции</span>
		</div>

		@if (isAdmin)
		{
			<div class="sidebar-item" @onclick="NavigateToAdmin">
				<img src="img/admin-icon.svg" alt="Админ-панель" />
				<span>Админ-панель</span>
			</div>
		}
	</div>
	<div class="main-content">
		<h1 class="page-title">Инвестиции</h1>

		<div class="investments-container">
			<div class="charts-column">
				<div class="investment-card">
					<div class="investment-card-header">
						<h2>График стоимости портфеля</h2>
						<div class="period-selector">
							<select class="period-select" @bind="portfolioPeriod" @bind:event="onchange">
								<option value="week">Неделя</option>
								<option value="month">Месяц</option>
								<option value="year">Год</option>
							</select>
						</div>
					</div>
					<div class="chart-container">
						<canvas id="portfolioChart" width="400" height="300"></canvas>
					</div>
				</div>

				<div class="investment-card">
					<div class="investment-card-header">
						<h2>Доходность портфеля</h2>
						<div class="period-selector">
							<select class="period-select" @bind="profitabilityPeriod" @bind:event="onchange">
								<option value="week">Неделя</option>
								<option value="month">Месяц</option>
								<option value="year">Год</option>
							</select>
						</div>
					</div>
					<div class="chart-container">
						<canvas id="profitabilityChart" width="400" height="300"></canvas>
					</div>
				</div>
			</div>

			<div class="side-column">
				<div class="investment-card">
					<div class="investment-card-header">
						<h2>Популярные акции</h2>
					</div>
					<div class="stocks-list">
						@if (stocksLoading)
						{
							<div>Загрузка данных...</div>
						}
						else if (!popularStocks.Any())
						{
							<div>Не удалось загрузить данные об акциях</div>
						}
						else
						{
							@foreach (var stock in popularStocks)
							{
								<div class="stock-item">
									<div class="stock-info">
										<span class="stock-name">@stock.Name (@stock.Ticker)</span>
										<span class="stock-price @(stock.ChangePercent >= 0 ? "positive" : "negative")">
											@stock.Price.ToString("N2") ₽
											<span>(@(stock.ChangePercent >= 0 ? "+" : "")@stock.ChangePercent.ToString("N1")%)</span>
										</span>
									</div>
									<button class="buy-button" @onclick="() => ShowBuyModal(stock)">
										Купить
									</button>
								</div>
							}
						}
					</div>
				</div>

				<!-- История операций -->
				<div class="investment-card">
					<div class="investment-card-header">
						<h2>История операций</h2>
					</div>
					<div class="transactions-list">
						@if (transactionsLoading)
						{
							<div>Загрузка данных...</div>
						}
						else if (!investments.Any())
						{
							<div>Нет операций для отображения</div>
						}
						else
						{
							@foreach (var investment in investments)
							{
								<div class="transaction-item">
									<div class="transaction-info">
										<span class="stock-name">
											@investment.StockName (@investment.Ticker) —
											@investment.Quantity шт. по @investment.PurchasePrice.ToString("N2") ₽
											(@investment.TransactionType)
										</span>
										<span class="transaction-profit @(investment.CurrentProfit >= 0 ? "positive" : "negative")">
											@(investment.CurrentProfit >= 0 ? "+" : "")@investment.CurrentProfit.ToString("N2") ₽
										</span>
									</div>
									@if (investment.TransactionType == "BUY")
									{
										<button class="sell-button" @onclick="() => ShowSellModal(investment)">
											Продать
										</button>
									}
								</div>
							}
						}
					</div>
				</div>
			</div>
		</div>
	</div>
</div>

@if (showBuyModal)
{
	<div class="modal-overlay" @onclick="CloseBuyModal">
		<div class="modal-content" @onclick:stopPropagation>
			<div class="modal-header">Покупка акций @selectedStock?.Name (@selectedStock?.Ticker)</div>
			<div class="form-group">
				<label class="form-label">Количество</label>
				<input type="number" class="form-input"
					   @bind="buyQuantity"
					   @bind:event="onchange"
					   @oninput="OnBuyQuantityChanged"
					   min="1" />
			</div>
			<div class="form-group">
				<label class="form-label">Цена за акцию</label>
				<input type="number" class="form-input" @bind="selectedStock.Price" disabled />
			</div>

			<div class="form-group">
				<label class="form-label">Общая стоимость</label>
				<input type="number" class="form-input"
					   @bind="totalCost"
					   @bind:event="oninput"
					   disabled />
			</div>
			<div class="modal-actions">
				<button class="btn btn-secondary" @onclick="CloseBuyModal">Отмена</button>
				<button class="btn btn-primary" @onclick="BuyStock">Купить</button>
			</div>
		</div>
	</div>
}

<!-- Модальное окно продажи акций -->
@if (showSellModal)
{
	<div class="modal-overlay" @onclick="CloseSellModal">
		<div class="modal-content" @onclick:stopPropagation>
			<div class="modal-header">Продажа акций @selectedInvestment?.StockName (@selectedInvestment?.Ticker)</div>
			<div class="form-group">
				<label class="form-label">Количество (макс. @selectedInvestment?.Quantity)</label>
				<input type="number" class="form-input"
					   @bind="sellQuantity"
					   @bind:event="onchange"
					   @oninput="OnSellQuantityChanged"
					   min="1" max="@selectedInvestment?.Quantity" />
			</div>
			<div class="form-group">
				<label class="form-label">Текущая цена</label>
				<input type="number" class="form-input" @bind="currentStockPrice" disabled />
			</div>
			<div class="form-group">
				<label class="form-label">Прибыль</label>
				<input type="number" class="form-input"
					   @bind="profitValue"
					   @bind:event="oninput"
					   disabled />
			</div>
			<div class="modal-actions">
				<button class="btn btn-secondary" @onclick="CloseSellModal">Отмена</button>
				<button class="btn btn-primary" @onclick="SellStock">Продать</button>
			</div>
		</div>
	</div>
}


@code {

	// Основные переменные
	private string portfolioPeriod = "month";
	private string profitabilityPeriod = "month";
	private decimal? currentBalance;
	private string? userId;
	private bool isAdmin = false;
	private ClaimsPrincipal? user;
	private string _avatarUrl = "https://ymzpnhfzzfkopqvrudiz.supabase.co/storage/v1/object/sign/avatar/avatar.svg?token=eyJraWQiOiJzdG9yYWdlLXVybC1zaWduaW5nLWtleV9jNTBhNTJhOS1kMzYyLTRjMWUtOGMyNi0wNDM3Yjg2ZTIwYzkiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJhdmF0YXIvYXZhdGFyLnN2ZyIsImlhdCI6MTc1MDY3NzcyNSwiZXhwIjoxNzgyMjEzNzI1fQ.nooWtvyI88n56xp0E0cANLdW2WznFL-9HpRnOuQVMUA"; // URL по умолчанию
	private string? _userName;
	private string? _email;
	private decimal totalCost = 0;
	private decimal profitValue = 0;

	// Данные для графиков
	private List<PortfolioDataPoint> portfolioData = new();
	private List<ProfitabilityDataPoint> profitabilityData = new();
	private IJSObjectReference? chartModule;
	private DotNetObjectReference<InvestmentPage>? dotNetHelper;

	// Данные об акциях и инвестициях
	private List<Stock> availableStocks = new();
	private List<InvestmentDto> investments = new();
	private bool stocksLoading = true;
	private bool transactionsLoading = true;

	// Модальные окна
	private bool showBuyModal = false;
	private bool showSellModal = false;
	private Stock? selectedStock;
	private InvestmentDto? selectedInvestment;
	private int buyQuantity = 1;
	private int sellQuantity = 1;
	private decimal currentStockPrice = 0;

	private List<Stock> popularStocks = new();

	// Классы моделей
	public class Stock
	{
		public int StockId { get; set; } 
		public string Name { get; set; }
		public string Ticker { get; set; }
		public decimal Price { get; set; }
		public decimal ChangePercent { get; set; }
	}
	public class InvestmentDto
	{
		public int InvestmentId { get; set; }
		public string InvestmentType { get; set; }
		public decimal Amount { get; set; }
		public DateTime? InvestmentDate { get; set; }
		public int UserId { get; set; }
		public int? StockId { get; set; }
		public string StockName { get; set; }
		public string Ticker { get; set; }
		public int Quantity { get; set; }
		public decimal PurchasePrice { get; set; }
		public decimal? SellPrice { get; set; }
		public string TransactionType { get; set; }
		public DateTime? TransactionDate { get; set; }
		public decimal? CurrentPrice { get; set; }
		public decimal CurrentProfit => (CurrentPrice ?? 0) * Quantity - PurchasePrice * Quantity;
	}

	public class PortfolioDataPoint
	{
		public DateTime Date { get; set; }
		public decimal Value { get; set; }
	}

	public class ProfitabilityDataPoint
	{
		public DateTime Date { get; set; }
		public decimal Profitability { get; set; }
	}
	public class BuyStockRequest
	{
		public int StockId { get; set; }
		public int UserId { get; set; }
		public int Quantity { get; set; }
		public decimal Price { get; set; }
	}
	public class SaleResult
	{
		public int SaleId { get; set; }
		public decimal NewBalance { get; set; }
		public string StockName { get; set; }
		public string Ticker { get; set; }
	}

	private class CardsTotalResponse
	{
		public decimal Total { get; set; }
	}
	public class UserData
	{
		public string Name { get; set; }
		public string Email { get; set; }
		public string AvatarUrl { get; set; }
	}

	[Inject]
	private Supabase.Client? Supabase { get; set; }

	protected override async Task OnInitializedAsync()
	{
		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		user = authState.User;

		if (user.Identity?.IsAuthenticated == true)
		{
			userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
			var roleClaim = user.FindFirst(ClaimTypes.Role)?.Value;
			isAdmin = roleClaim == "1";

			await LoadUserBalance();
			await LoadUserData();
			await LoadAllData();
			await LoadPopularStocks();
			await base.OnInitializedAsync();
		}
	}

	private async Task LoadUserData()
	{
		try
		{
			var response = await Http.GetAsync($"api/UserAccount/{userId}/with-avatar");
			if (response.IsSuccessStatusCode)
			{
				var userData = await response.Content.ReadFromJsonAsync<UserData>();

				_userName = userData?.Name ?? string.Empty;
				_email = userData?.Email ?? string.Empty;

				_avatarUrl = userData?.AvatarUrl ?? "https://placehold.co/40";

				StateHasChanged();
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Ошибка загрузки данных пользователя: {ex.Message}");
			_avatarUrl = "https://placehold.co/40";
			_userName = string.Empty;
			_email = string.Empty;
			StateHasChanged();
		}
	}
	private async Task LoadPopularStocks()
	{
		stocksLoading = true;
		try
		{
			popularStocks = await Http.GetFromJsonAsync<List<Stock>>("api/stocks/popular");
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error loading stocks: {ex.Message}");
		}
		finally
		{
			stocksLoading = false;
			StateHasChanged();
		}
	}
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			dotNetHelper = DotNetObjectReference.Create(this);
			chartModule = await JSRuntime.InvokeAsync<IJSObjectReference>(
				"import", "./js/charts.js");

			await LoadPortfolioData();
			await LoadProfitabilityData();
		}
	}

	private async Task LoadAllData()
	{
		await Task.WhenAll(
			LoadAvailableStocks(),
			LoadInvestments()
		);
	}

	private async Task LoadAvailableStocks()
	{
		stocksLoading = true;
		try
		{
			var response = await Http.GetAsync("api/stocks");
			if (response.IsSuccessStatusCode)
			{
				availableStocks = await response.Content.ReadFromJsonAsync<List<Stock>>();
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Ошибка загрузки акций: {ex.Message}");
		}
		finally
		{
			stocksLoading = false;
			StateHasChanged();
		}
	}

	private async Task LoadInvestments()
	{
		transactionsLoading = true;
		try
		{
			var response = await Http.GetAsync($"api/investments/user/{userId}");
			if (response.IsSuccessStatusCode)
			{
				var content = await response.Content.ReadAsStringAsync();
				Console.WriteLine($"Investments API response: {content}"); // Логируем ответ

				investments = await response.Content.ReadFromJsonAsync<List<InvestmentDto>>();

				// Проверяем полученные ID
				foreach (var inv in investments)
				{
					Console.WriteLine($"Loaded investment: ID={inv.InvestmentId}, Stock={inv.StockId}, Qty={inv.Quantity}");
				}
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error loading investments: {ex.Message}");
		}
		finally
		{
			transactionsLoading = false;
			StateHasChanged();
		}
	}

	private async Task LoadPortfolioData()
	{
		try
		{
			Console.WriteLine($"Loading portfolio data for period: {portfolioPeriod}");
			var response = await Http.GetAsync($"api/investments/portfolio?userId={userId}&period={portfolioPeriod}");

			if (!response.IsSuccessStatusCode)
			{
				var errorContent = await response.Content.ReadAsStringAsync();
				Console.WriteLine($"Error loading portfolio: {response.StatusCode}. Content: {errorContent}");
				await JSRuntime.InvokeVoidAsync("console.error", $"Error loading portfolio: {errorContent}");
				return;
			}

			portfolioData = await response.Content.ReadFromJsonAsync<List<PortfolioDataPoint>>();

			if (portfolioData == null || !portfolioData.Any())
			{
				Console.WriteLine("No portfolio data received");
				return;
			}

			Console.WriteLine($"Received {portfolioData.Count} portfolio data points");

			if (chartModule != null)
			{
				try
				{
					await chartModule.InvokeVoidAsync(
						"renderPortfolioChart",
						"portfolioChart",
						portfolioData.Select(p => p.Date.ToString("dd.MM.yyyy")).ToArray(),
						portfolioData.Select(p => (double)p.Value).ToArray());
				}
				catch (Exception ex)
				{
					Console.WriteLine($"Error rendering portfolio chart: {ex.Message}");
				}
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error loading portfolio data: {ex.Message}");
			await JSRuntime.InvokeVoidAsync("console.error", $"Error loading portfolio: {ex.Message}");
		}
		finally
		{
			StateHasChanged();
		}
	}
	private async Task LoadProfitabilityData()
	{
		try
		{
			Console.WriteLine($"Loading profitability data for period: {profitabilityPeriod}");

			var response = await Http.GetAsync($"api/investments/profitability?userId={userId}&period={profitabilityPeriod}");

			if (response.IsSuccessStatusCode)
			{
				profitabilityData = await response.Content.ReadFromJsonAsync<List<ProfitabilityDataPoint>>();

				if (profitabilityData == null || !profitabilityData.Any())
				{
					Console.WriteLine("No profitability data received from API");
					return;
				}

				Console.WriteLine($"Received {profitabilityData.Count} data points");

				// Сортируем данные по дате (на случай если API возвращает неупорядоченные)
				profitabilityData = profitabilityData.OrderBy(p => p.Date).ToList();

				// Логируем первые и последние точки для отладки
				Console.WriteLine($"First point: {profitabilityData.First().Date} - {profitabilityData.First().Profitability}%");
				Console.WriteLine($"Last point: {profitabilityData.Last().Date} - {profitabilityData.Last().Profitability}%");

				if (chartModule != null)
				{
					await chartModule.InvokeVoidAsync(
						"renderProfitabilityChart",
						"profitabilityChart",
						profitabilityData.Select(p => p.Date.ToString("dd.MM.yyyy")).ToArray(),
						profitabilityData.Select(p => (double)p.Profitability).ToArray());
				}
			}
			else
			{
				Console.WriteLine($"API request failed: {response.StatusCode}");
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error loading profitability data: {ex.Message}");
		}
		finally
		{
			StateHasChanged(); // Обновляем UI в любом случае
		}
	}

	private async Task CalculateManualProfitability()
	{
		if (!investments.Any()) return;

		var activeInvestments = investments.Where(i => i.TransactionType == "BUY").ToList();

		foreach (var inv in activeInvestments)
		{
			var response = await Http.GetAsync($"api/stocks/{inv.StockId}/price");
			if (response.IsSuccessStatusCode)
			{
				inv.CurrentPrice = await response.Content.ReadFromJsonAsync<decimal>();
			}
		}

		decimal totalCost = activeInvestments.Sum(i => i.PurchasePrice * i.Quantity);
		decimal totalValue = activeInvestments.Sum(i => (i.CurrentPrice ?? 0) * i.Quantity);

		decimal profitability = (totalValue - totalCost) / totalCost * 100;

		Console.WriteLine($"Manual calculation - Profitability: {profitability}%");
	}
	private List<ProfitabilityDataPoint> GetTestProfitabilityData()
	{
		return new List<ProfitabilityDataPoint>
	{
		new ProfitabilityDataPoint { Date = DateTime.Now.AddDays(-6), Profitability = 0.5m },
		new ProfitabilityDataPoint { Date = DateTime.Now.AddDays(-5), Profitability = 1.2m },
		new ProfitabilityDataPoint { Date = DateTime.Now.AddDays(-4), Profitability = 2.1m },
		new ProfitabilityDataPoint { Date = DateTime.Now.AddDays(-3), Profitability = 1.8m },
		new ProfitabilityDataPoint { Date = DateTime.Now.AddDays(-2), Profitability = 2.5m },
		new ProfitabilityDataPoint { Date = DateTime.Now.AddDays(-1), Profitability = 3.0m },
		new ProfitabilityDataPoint { Date = DateTime.Now, Profitability = 2.7m }
	};
	}

	private async Task LoadUserBalance()
	{
		try
		{
			var response = await Http.GetAsync($"api/Budget/users/{userId}/cards-total");
			if (response.IsSuccessStatusCode)
			{
				var content = await response.Content.ReadFromJsonAsync<CardsTotalResponse>();
				currentBalance = content?.Total ?? 0;
				StateHasChanged();
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Ошибка загрузки баланса: {ex.Message}");
		}
	}

	private void ShowBuyModal(Stock stock)
	{
		selectedStock = stock;
		buyQuantity = 1;
		showBuyModal = true;
		UpdateTotalCost();
		StateHasChanged();
	}

	private void CloseBuyModal()
	{
		showBuyModal = false;
		selectedStock = null;
	}

	private async Task ShowSellModal(InvestmentDto investment)
	{
		try
		{
			Console.WriteLine($"Showing sell modal for investment: {investment.InvestmentId}");

			// Load current price
			var response = await Http.GetAsync($"api/stocks/{investment.StockId}/price");
			if (response.IsSuccessStatusCode)
			{
				currentStockPrice = await response.Content.ReadFromJsonAsync<decimal>();
				Console.WriteLine($"Current price loaded: {currentStockPrice}");

				selectedInvestment = investment;
				sellQuantity = investment.Quantity;
				showSellModal = true;
				showSellModal = true;
				UpdateProfitValue();
				StateHasChanged();
			}
			else
			{
				var error = await response.Content.ReadAsStringAsync();
				Console.WriteLine($"Error getting stock price: {error}");
				await JSRuntime.InvokeVoidAsync("alert", $"Ошибка получения цены: {error}");
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error in ShowSellModal: {ex.Message}");
			await JSRuntime.InvokeVoidAsync("alert", "Ошибка при загрузке данных");
		}
	}


	private void CloseSellModal()
	{
		showSellModal = false;
		selectedInvestment = null;
	}

	// Методы покупки и продажи акций
	private async Task BuyStock()
	{
		try
		{
			var request = new
			{
				StockId = selectedStock.StockId,
				UserId = int.Parse(userId), // Преобразуем в int
				Quantity = buyQuantity,
				Price = selectedStock.Price
			};

			var response = await Http.PostAsJsonAsync("api/investments/buy", request);

			if (!response.IsSuccessStatusCode)
			{
				var error = await response.Content.ReadAsStringAsync();
				await JSRuntime.InvokeVoidAsync("alert", $"Ошибка: {error}");
				return;
			}

			// Обновляем данные
			await LoadInvestments();
			await LoadPortfolioData();
			CloseBuyModal();
		}
		catch (Exception ex)
		{
			await JSRuntime.InvokeVoidAsync("alert", $"Ошибка: {ex.Message}");
		}
	}

	private async Task SellStock()
	{
		try
		{
			Console.WriteLine($"SellStock called. selectedInvestment: {selectedInvestment?.InvestmentId}, showSellModal: {showSellModal}");

			if (selectedInvestment == null || selectedInvestment.InvestmentId == 0)
			{
				await JSRuntime.InvokeVoidAsync("alert", "Не выбрана инвестиция для продажи");
				return;
			}

			var request = new
			{
				InvestmentId = selectedInvestment.InvestmentId,
				Quantity = sellQuantity,
				CurrentPrice = currentStockPrice
			};

			Console.WriteLine($"Sending sell request: {JsonSerializer.Serialize(request)}");

			var response = await Http.PostAsJsonAsync("api/investments/sell", request);

			if (!response.IsSuccessStatusCode)
			{
				var error = await response.Content.ReadAsStringAsync();
				Console.WriteLine($"Error selling: {error}");
				await JSRuntime.InvokeVoidAsync("alert", $"Ошибка: {error}");
				return;
			}

			// Read and log the response
			var responseContent = await response.Content.ReadAsStringAsync();
			Console.WriteLine($"Sell response: {responseContent}");

			// Update all necessary data
			await Task.WhenAll(
				LoadUserBalance(),
				LoadInvestments(),
				LoadPortfolioData(),
				LoadProfitabilityData()
			);

			CloseSellModal();
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error in SellStock: {ex}");
			await JSRuntime.InvokeVoidAsync("alert", "Ошибка при продаже акций");
		}
	}
	private decimal GetTotalCost()
	{
		totalCost = selectedStock?.Price * buyQuantity ?? 0;
		return totalCost;
	}

	private decimal GetProfitValue()
	{
		profitValue = (currentStockPrice - (selectedInvestment?.PurchasePrice ?? 0)) * sellQuantity;
		return profitValue;
	}

	private void OnBuyQuantityChanged(ChangeEventArgs e)
	{
		if (int.TryParse(e.Value?.ToString(), out int newQuantity))
		{
			buyQuantity = newQuantity;
			UpdateTotalCost();
		}
	}

	private void OnSellQuantityChanged(ChangeEventArgs e)
	{
		if (int.TryParse(e.Value?.ToString(), out int newQuantity))
		{
			sellQuantity = newQuantity;
			UpdateProfitValue();
		}
	}
	private void UpdateTotalCost()
	{
		totalCost = selectedStock?.Price * buyQuantity ?? 0;
	}

	private void UpdateProfitValue()
	{
		profitValue = (currentStockPrice - (selectedInvestment?.PurchasePrice ?? 0)) * sellQuantity;
	}

	// Методы навигации
	private void NavigateToHistory() => Navigation.NavigateTo("/history");
	private void NavigateToTransfers() => Navigation.NavigateTo("/transfers");
	private void NavigateToInvestments() => Navigation.NavigateTo("/investments");
	private void NavigateToAdmin() => Navigation.NavigateTo("/admin");
	private void NavigateToMain() => Navigation.NavigateTo("/main");
	private void NavigateToAccount() => Navigation.NavigateTo("/account");

	private async Task Logout()
	{
		if (AuthenticationStateProvider is CustomAuthStateProvider customProvider)
		{
			await customProvider.LogoutAsync();
		}
		Navigation.NavigateTo("/login");
	}

	public void Dispose()
	{
		dotNetHelper?.Dispose();
	}

}