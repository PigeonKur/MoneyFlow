@page "/main"
@inject NavigationManager Navigation
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.Extensions.Logging
@using MoneyFlowClient.Client.Models
@using System.Net.Http
@using System.Security.Claims
@using System.Net
@using System.Text.Json
@using System.Text.Json.Serialization
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="js/dashboardCharts.js"></script>

<style>
	/* Основные стили */
	:root {
		--primary-color: #2e86de;
		--sidebar-width: 110px; /* Уменьшил ширину сайдбара */
		--header-height: 70px;
		--card-shadow: 0 2px 10px rgba(0, 0, 0, 0.08);
		--border-color: #eae6e6;
	}

	body {
		margin: 0;
		font-family: 'Inter', sans-serif;
		background-color: #f8f9fd;
		color: #000000;
	}

	/* Общая структура */
	.screen {
		display: grid;
		grid-template-columns: var(--sidebar-width) 1fr;
		grid-template-rows: var(--header-height) 1fr;
		min-height: 100vh;
	}

	/* Шапка */
	.header {
		grid-column: 2;
		grid-row: 1;
		display: flex;
		justify-content: space-between;
		align-items: center;
		padding: 0 25px; /* Уменьшил отступы */
		background: #ffffff;
		box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
		z-index: 100;
		height: var(--header-height);
	}

	.logo {
		font-size: 24px;
		font-weight: 700;
		color: var(--primary-color);
	}

	/* Боковая панель с увеличенными иконками */
	.sidebar {
		grid-column: 1;
		grid-row: 1 / span 2;
		background: #ffffff;
		box-shadow: 1px 0 3px rgba(0, 0, 0, 0.1);
		padding-top: 15px;
		display: flex;
		flex-direction: column;
		align-items: center;
		z-index: 90;
	}

	.sidebar-item {
		width: 100%;
		padding: 25px 0; /* Увеличил отступы */
		display: flex;
		flex-direction: column;
		align-items: center;
		gap: 10px;
		cursor: pointer;
		font-size: 12px;
		color: #555;
		transition: all 0.2s;
	}

		.sidebar-item:hover {
			background: #f5f7ff;
		}

		.sidebar-item.active {
			color: var(--primary-color);
			background: #f0f4ff;
		}

		.sidebar-item img {
			width: 60px; /* Увеличил иконки */
			height: 60px;
		}

	/* Основное содержимое - смещено влево-вверх */
	.main-content {
		grid-column: 2;
		grid-row: 2;
		padding: 15px 20px; /* Уменьшил отступы */
		background-color: #f8f9fd;
		margin-top: 0px; /* Сдвигаем вверх */
		margin-left: 35px; /* Сдвигаем влево */
	}

	.page-title {
		font-size: 22px;
		margin: 0 0 15px 0; /* Уменьшил отступы */
		color: #000;
		font-weight: 700;
	}

	/* Карточки */
	.dashboard-row {
		display: flex;
		gap: 15px; /* Уменьшил промежуток */
		margin-bottom: 15px;
	}

	.card {
		background: #ffffff;
		border-radius: 10px;
		box-shadow: 0 2px 10px rgba(0, 0, 0, 0.08);
		padding: 15px;
		display: flex;
		flex-direction: column;
	}

	.wide-card {
		flex: 3;
		min-height: 300px; /* Уменьшенная высота */
	}

	.small-card {
		flex: 1;
		min-height: 300px; /* Уменьшенная высота */
	}

	.card-header {
		display: flex;
		justify-content: space-between;
		align-items: center;
		margin-bottom: 15px;
	}

		.card-header h2 {
			font-size: 16px;
			margin: 0;
			color: #000;
			font-weight: 700;
		}


	/* Элементы управления */
	.period-selector select {
		padding: 6px 10px;
		border: 1px solid #ddd;
		border-radius: 6px;
		background: white;
		font-size: 12px;
		cursor: pointer;
	}

	/* Контейнер для графиков */
	.chart-container {
		flex-grow: 1;
		position: relative;
		min-height: 200px; /* Уменьшенная высота области графика */
	}
	/* Панель пользователя */
	.user-panel {
		display: flex;
		align-items: center;
		gap: 15px;
	}

	.balance {
		text-align: right;
	}

	.balance-label {
		display: block;
		font-size: 12px;
		color: #666;
	}

	.balance-amount {
		font-size: 16px;
		font-weight: 700;
	}

	.avatar {
		width: 40px;
		height: 40px;
		border-radius: 50%;
		overflow: hidden;
		cursor: pointer;
		background: #eee;
		display: flex;
		align-items: center;
		justify-content: center;
	}

		.avatar img {
			width: 100%;
			height: 100%;
			object-fit: cover;
		}

	/* Графики (заглушки) */
	.chart-placeholder {
		background: #f9f9f9;
		border-radius: 8px;
		display: flex;
		align-items: center;
		justify-content: center;
		color: #999;
		font-size: 14px;
		height: 100%;
	}
</style>

<div class="screen">
	<!-- Шапка -->
	<div class="header">
		<div class="logo">MoneyFlow</div>
		<div class="user-panel">
			<div class="balance">
				<span class="balance-label">Баланс</span>
				<span class="balance-amount">@(currentBalance?.ToString("N0") ?? "0") Р</span>
			</div>
			<div class="avatar" @onclick="NavigateToAccount">
				<img src="@_avatarUrl" alt="Аватар"
					 onerror="this.src='https://ymzpnhfzzfkopqvrudiz.supabase.co/storage/v1/object/sign/avatar/avatar.svg?token=eyJraWQiOiJzdG9yYWdlLXVybC1zaWduaW5nLWtleV9jNTBhNTJhOS1kMzYyLTRjMWUtOGMyNi0wNDM3Yjg2ZTIwYzkiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJhdmF0YXIvYXZhdGFyLnN2ZyIsImlhdCI6MTc1MDY3ODQ4NywiZXhwIjoxNzgyMjE0NDg3fQ.2MejLtqa8h0_90wYdz_Z4g4WORZnx2itSRRnm4CzpR8'" />
			</div>
		</div>
	</div>


	<!-- Боковая панель с увеличенными иконками -->
	<div class="sidebar">
		<div class="sidebar-item" @onclick="NavigateToHistory">
			<img src="img/history-icon.svg" alt="История" />
			<span>История</span>
		</div>
		<div class="sidebar-item" @onclick="NavigateToTransfers">
			<img src="img/transfers-icon.svg" alt="Переводы" />
			<span>Переводы</span>
		</div>
		<div class="sidebar-item" @onclick="NavigateToInvestments">
			<img src="img/investments-icon.svg" alt="Инвестиции" />
			<span>Инвестиции</span>
		</div>

		@if (isAdmin)
		{
			<div class="sidebar-item" @onclick="NavigateToAdmin">
				<img src="img/admin-icon.svg" alt="Админ-панель" />
				<span>Админ-панель</span>
			</div>
		}
	</div>


	<!-- Основное содержимое -->
	<div class="main-content">
		<h1 class="page-title">Рабочий стол</h1>

		<!-- Первая строка с карточками -->
		<div class="dashboard-row">
			<div class="card wide-card">
				<div class="card-header">
					<h2>Доходы и расходы</h2>
					<div class="period-selector">
						<select @bind="selectedPeriod">
							<option value="day">День</option>
							<option value="week">Неделя</option>
							<option value="month">Месяц</option>
							<option value="year">Год</option>
						</select>
					</div>
				</div>
				<div class="chart-container">
					<canvas id="incomeExpenseChart"></canvas>
				</div>
			</div>

			<div class="card small-card">
				<div class="card-header">
					<h2>Поступления за период</h2>
					<div class="period-selector">
						<select @bind="selectedMiniIncomePeriod">
							<option value="day">День</option>
							<option value="week">Неделя</option>
							<option value="month">Месяц</option>
							<option value="year">Год</option>
						</select>
					</div>
				</div>
				<div class="chart-container">
					<canvas id="incomePieChart"></canvas>
				</div>
			</div>
		</div>

		<!-- Вторая строка с карточками -->
		<div class="dashboard-row">
			<div class="card wide-card">
				<div class="card-header">
					<h2>Динамика остатков</h2>
					<div class="period-selector">
						<select @bind="selectedTrendPeriod">
							<option value="day">День</option>
							<option value="week">Неделя</option>
							<option value="month">Месяц</option>
							<option value="year">Год</option>
						</select>
					</div>
				</div>
				<div class="chart-container">
					<canvas id="balanceTrendChart"></canvas>
				</div>
			</div>

			<div class="card small-card">
				<div class="card-header">
					<h2>Расходы за период</h2>
					<div class="period-selector">
						<select @bind="selectedMiniExpensePeriod">
							<option value="day">День</option>
							<option value="week">Неделя</option>
							<option value="month">Месяц</option>
							<option value="year">Год</option>
						</select>
					</div>
				</div>
				<div class="chart-container">
					<canvas id="expensePieChart"></canvas>
				</div>
			</div>
		</div>
	</div>
</div>

<AuthorizeView>
	<Authorized>
	</Authorized>
	<NotAuthorized>
		<div class="auth-message">
			<p>Вы не авторизованы</p>
			<button @onclick="RedirectToLogin">Войти</button>
		</div>
	</NotAuthorized>
</AuthorizeView>

@code {
	private decimal? currentBalance;
	private string? userId;
	private bool isAdmin = false;
	private ClaimsPrincipal? user;
	private string selectedPeriod = "month";
	private string selectedTrendPeriod = "month";
	private string selectedMiniIncomePeriod = "month";
	private string selectedMiniExpensePeriod = "month";
	private string? _userName;
	private string? _email;
	private string _avatarUrl = "https://ymzpnhfzzfkopqvrudiz.supabase.co/storage/v1/object/sign/avatar/avatar.svg?token=eyJraWQiOiJzdG9yYWdlLXVybC1zaWduaW5nLWtleV9jNTBhNTJhOS1kMzYyLTRjMWUtOGMyNi0wNDM3Yjg2ZTIwYzkiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJhdmF0YXIvYXZhdGFyLnN2ZyIsImlhdCI6MTc1MDY3NzcyNSwiZXhwIjoxNzgyMjEzNzI1fQ.nooWtvyI88n56xp0E0cANLdW2WznFL-9HpRnOuQVMUA"; // URL по умолчанию
	private string? _userEmail;
	private List<TransactionDto> transactions = new();
	private List<BalanceHistoryDto> balanceHistory = new();
	private decimal totalIncome;
	private decimal totalExpense;
	private Dictionary<string, decimal> incomeCategories = new();
	private Dictionary<string, decimal> expenseCategories = new();
	private bool isLoading = false;

	[Inject]
	private Supabase.Client? Supabase { get; set; }

	private void NavigateToAccount() => Navigation.NavigateTo("/account");
	private void NavigateToHistory() => Navigation.NavigateTo("/history");
	private void NavigateToTransfers() => Navigation.NavigateTo("/transfers");
	private void NavigateToInvestments() => Navigation.NavigateTo("/investments");
	private void NavigateToAdmin() => Navigation.NavigateTo("/admin");
	private async Task RedirectToLogin() => Navigation.NavigateTo("/login");


	protected override async Task OnInitializedAsync()
	{
		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		user = authState.User;
		await ProcessAuthState(authState);
		if (user.Identity?.IsAuthenticated == true)
		{
			await LoadDashboardData();
		}
	}

	private async Task ProcessAuthState(AuthenticationState authState)
	{
		user = authState.User;

		if (user.Identity is { IsAuthenticated: true })
		{
			userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
			_userEmail = user.FindFirst(ClaimTypes.Email)?.Value; // Получаем email пользователя

			// Получаем роль из claims
			var roleClaim = user.FindFirst(ClaimTypes.Role)?.Value;
			isAdmin = roleClaim == "1";

			await JSRuntime.InvokeVoidAsync("console.log",
				$"User ID: {userId}, Role: {roleClaim}, IsAdmin: {isAdmin}");

			if (!string.IsNullOrEmpty(userId))
			{
				await LoadUserBalance();
				await LoadUserData();
			}
		}
		else
		{
			isAdmin = false;
			await JSRuntime.InvokeVoidAsync("console.log", "Пользователь не авторизирован");
		}

		StateHasChanged();
	}
	private async Task LoadUserData()
	{
		try
		{
			var response = await Http.GetAsync($"api/UserAccount/{userId}/with-avatar");
			if (response.IsSuccessStatusCode)
			{
				var userData = await response.Content.ReadFromJsonAsync<UserData>();

				// Инициализируем значения по умолчанию для null
				_userName = userData?.Name ?? string.Empty;
				_email = userData?.Email ?? string.Empty;

				// Используем URL аватарки из базы данных или fallback
				_avatarUrl = userData?.AvatarUrl ?? "https://placehold.co/40";

				StateHasChanged();
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Ошибка загрузки данных пользователя: {ex.Message}");
			_avatarUrl = "https://placehold.co/40";
			_userName = string.Empty;
			_email = string.Empty;
			StateHasChanged();
		}
	}

	private async Task<bool> CheckIfAvatarExists(string fileName)
	{
		if (Supabase == null) return false;

		try
		{
			var list = await Supabase.Storage
				.From("avatar")
				.List();

			return list.Any(f => f.Name == fileName);
		}
		catch
		{
			return false;
		}
	}
	private async Task LoadUserBalance()
	{
		try
		{
			var response = await Http.GetAsync($"api/Budget/users/{userId}/cards-total");
			if (response.IsSuccessStatusCode)
			{
				var content = await response.Content.ReadFromJsonAsync<CardsTotalResponse>();
				currentBalance = content?.Total ?? 0;
			}
		}
		catch (Exception ex)
		{
			await JSRuntime.InvokeVoidAsync("console.error", $"Ошибка загрузки баланса: {ex.Message}");
		}
		finally
		{
			StateHasChanged();
		}
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await InitializeCharts();
		}
	}

	private async Task LoadDashboardData()
	{
		isLoading = true;
		StateHasChanged();

		try
		{
			var response = await Http.GetAsync($"api/Balance/dashboard-data?userId={userId}&period={selectedPeriod}");

			if (response.IsSuccessStatusCode)
			{
				var dashboardData = await response.Content.ReadFromJsonAsync<DashboardData>();

				transactions = dashboardData.Transactions;
				balanceHistory = dashboardData.BalanceHistory;

				// Пересчитываем категории с учетом инвестиций
				incomeCategories = CalculateIncomeCategories(transactions);
				expenseCategories = CalculateExpenseCategories(transactions);

				totalIncome = incomeCategories.Sum(x => x.Value);
				totalExpense = expenseCategories.Sum(x => x.Value);
			}

			await InitializeCharts();
		}
		catch (Exception ex)
		{
			await JSRuntime.InvokeVoidAsync("console.error", $"Ошибка загрузки данных: {ex.Message}");
		}
		finally
		{
			isLoading = false;
			StateHasChanged();
		}
	}

	// Новые методы для расчета категорий
	private Dictionary<string, decimal> CalculateIncomeCategories(List<TransactionDto> transactions)
	{
		return transactions
			.Where(t => t.Amount > 0) // Доходы
			.GroupBy(t => t.IsInvestment
				? (t.TransactionType == "Продажа акций" ? "Продажа акций" : t.TransactionType)
				: t.TransactionType)
			.ToDictionary(g => g.Key, g => g.Sum(t => t.Amount));
	}

	private Dictionary<string, decimal> CalculateExpenseCategories(List<TransactionDto> transactions)
	{
		return transactions
			.Where(t => t.Amount < 0) // Расходы
			.GroupBy(t => t.IsInvestment
				? (t.TransactionType == "Покупка акций" ? "Покупка акций" : t.TransactionType)
				: t.TransactionType)
			.ToDictionary(g => g.Key, g => Math.Abs(g.Sum(t => t.Amount)));
	}	
	private async Task OnPeriodChanged()
	{
		await LoadDashboardData();
	}
	private async Task InitializeCharts()
	{
		if (expenseCategories.Any())
		{
			// Убедимся, что нет нулевых значений
			var validExpenseCategories = expenseCategories
				.Where(x => x.Value > 0)
				.ToDictionary(x => x.Key, x => x.Value);

			if (validExpenseCategories.Any())
			{
				var expenseLabels = validExpenseCategories.Keys.ToArray();
				var expenseData = validExpenseCategories.Values.Select(v => (double)v).ToArray();
				var expenseColors = GenerateColors(validExpenseCategories.Count);

				await JSRuntime.InvokeVoidAsync("dashboardCharts.renderMiniPieChart",
					"expensePieChart", expenseLabels, expenseData, expenseColors, $"Всего: {totalExpense:N0} ₽");
			}
			else
			{
				Console.WriteLine("Нет данных для отображения круговой диаграммы расходов");
			}
		}
		try
		{
			// 1. График доходов/расходов
			if (transactions.Any())
			{
				var transactionsByMonth = transactions
					.GroupBy(t => new { t.TransactionDate.Year, t.TransactionDate.Month })
					.OrderBy(g => g.Key.Year)
					.ThenBy(g => g.Key.Month)
					.ToList();

				var monthLabels = transactionsByMonth
					.Select(g => new DateTime(g.Key.Year, g.Key.Month, 1).ToString("MMM yyyy"))
					.ToArray();

				var incomesByMonth = transactionsByMonth
					.Select(g => (double)g.Where(t => t.Amount > 0).Sum(t => t.Amount))
					.ToArray();

				var expensesByMonth = transactionsByMonth
					.Select(g => (double)g.Where(t => t.Amount < 0).Sum(t => Math.Abs(t.Amount)))
					.ToArray();

				await JSRuntime.InvokeVoidAsync("dashboardCharts.renderIncomeExpenseChart",
					"incomeExpenseChart", monthLabels, incomesByMonth, expensesByMonth);
			}

			// 2. График динамики остатков
			if (balanceHistory.Any())
			{
				var balanceLabels = balanceHistory
					.OrderBy(b => b.Date)
					.Select(b => b.Date.ToString("dd MMM"))
					.ToArray();

				var balanceData = balanceHistory
					.OrderBy(b => b.Date)
					.Select(b => (double)b.Balance)
					.ToArray();

				await JSRuntime.InvokeVoidAsync("dashboardCharts.renderBalanceTrendChart",
					"balanceTrendChart", balanceLabels, balanceData);
			}

			// 3. Круговые диаграммы
			if (incomeCategories.Any())
			{
				var incomeLabels = incomeCategories.Keys.ToArray();
				var incomeData = incomeCategories.Values.Select(v => (double)v).ToArray();
				var incomeColors = GenerateColors(incomeCategories.Count);

				await JSRuntime.InvokeVoidAsync("dashboardCharts.renderMiniPieChart",
					"incomePieChart", incomeLabels, incomeData, incomeColors, $"Всего: {totalIncome:N0} ₽");
			}

			if (expenseCategories.Any())
			{
				var expenseLabels = expenseCategories.Keys.ToArray();
				var expenseData = expenseCategories.Values.Select(v => (double)v).ToArray();
				var expenseColors = GenerateColors(expenseCategories.Count);

				await JSRuntime.InvokeVoidAsync("dashboardCharts.renderMiniPieChart",
					"expensePieChart", expenseLabels, expenseData, expenseColors, $"Всего: {totalExpense:N0} ₽");
			}
		}
		catch (Exception ex)
		{
			await JSRuntime.InvokeVoidAsync("console.error", $"Ошибка инициализации графиков: {ex.Message}");
		}
	}

	private string[] GenerateColors(int count)
	{
		var colors = new[]
			{
		"#2e86de", "#28a745", "#ffc107", "#dc3545", "#6c757d",
		"#6610f2", "#fd7e14", "#20c997", "#0dcaf0", "#ff6b6b",
		"#8e44ad", "#3498db", "#e74c3c", "#1abc9c", "#f39c12"
		};

		// Если нужно больше цветов, чем есть в массиве, начинаем повторять
		var result = new List<string>();
		for (int i = 0; i < count; i++)
		{
			result.Add(colors[i % colors.Length]);
		}

		return result.ToArray();
	}

	public class BalanceHistoryDto
	{
		public DateTime Date { get; set; }
		public decimal Balance { get; set; }
	}

	public class UserData
	{
		public string Name { get; set; }
		public string Email { get; set; }
		public string AvatarUrl { get; set; }
	}
	private class CardsTotalResponse
	{
		public decimal Total { get; set; }
	}
	public class TransactionDto
	{
		public int TransactionId { get; set; }
		public int UserId { get; set; }
		public int? RelatedUserId { get; set; }
		public string TransactionType { get; set; }
		public decimal Amount { get; set; }
		public DateTime TransactionDate { get; set; }
		public string Comment { get; set; }
		public TransactionStatusDto Status { get; set; }
		public int? FromBudgetId { get; set; }
		public string FromBudgetName { get; set; }
		public int? ToBudgetId { get; set; }
		public string ToBudgetName { get; set; }

		// Поля для инвестиций
		public bool IsInvestment { get; set; }
		public int? StockId { get; set; }
		public string StockName { get; set; }
		public string StockTicker { get; set; }
		public int Quantity { get; set; }
		public decimal PurchasePrice { get; set; }
		public decimal SellPrice { get; set; }
		public decimal CurrentProfit { get; set; }
	}
	public class TransactionStatusDto
	{
		public int StatusId { get; set; }
		public string StatusName { get; set; }

	}

	public class DashboardData
	{
		public List<TransactionDto> Transactions { get; set; }
		public List<BalanceHistoryDto> BalanceHistory { get; set; }
		public Dictionary<string, decimal> IncomeCategories { get; set; }
		public Dictionary<string, decimal> ExpenseCategories { get; set; }
		public decimal TotalIncome { get; set; }
		public decimal TotalExpense { get; set; }
	}
}


