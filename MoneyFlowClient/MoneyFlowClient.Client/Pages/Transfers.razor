@page "/transfers"
@inject NavigationManager Navigation
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider
@using System.Text.Json
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization

<link href="css/account.css" rel="stylesheet" />

<style>
    /* Основные стили (как в MainScreen) */
    :root {
        --primary-color: #2e86de;
        --sidebar-width: 110px;
        --header-height: 70px;
        --card-shadow: 0 2px 10px rgba(0, 0, 0, 0.08);
        --border-color: #eae6e6;
    }


    body {
        margin: 0;
        font-family: 'Inter', sans-serif;
        background-color: #f8f9fd;
        color: #000000;
    }

    /* Общая структура */
    .screen {
        display: grid;
        grid-template-columns: var(--sidebar-width) 1fr;
        grid-template-rows: var(--header-height) 1fr;
        min-height: 100vh;
    }

    /* Шапка */
    .header {
        grid-column: 2;
        grid-row: 1;
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0 25px;
        background: #ffffff;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        z-index: 100;
        height: var(--header-height);
    }

    .logo {
        font-size: 24px;
        font-weight: 700;
        color: var(--primary-color);
    }

    /* Боковая панель */
    .sidebar {
        grid-column: 1;
        grid-row: 1 / span 2;
        background: #ffffff;
        box-shadow: 1px 0 3px rgba(0, 0, 0, 0.1);
        padding-top: 15px;
        display: flex;
        flex-direction: column;
        align-items: center;
        z-index: 90;
    }

    .sidebar-item {
        width: 100%;
        padding: 25px 0;
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 10px;
        cursor: pointer;
        font-size: 12px;
        color: #555;
        transition: all 0.2s;
    }

        .sidebar-item:hover {
            background: #f5f7ff;
        }

        .sidebar-item.active {
            color: var(--primary-color);
            background: #f0f4ff;
        }

        .sidebar-item img {
            width: 60px;
            height: 60px;
        }

    /* Основное содержимое - смещено влево-вверх */
    .admin-content {
        grid-column: 2;
        padding: 15px 20px;
        background-color: #f8f9fd;
    }

        .admin-content h1 {
            font-size: 24px;
            margin-bottom: 20px;
            color: #000;
            font-weight: 700;
        }

    .page-title {
        font-size: 22px;
        margin: 0 0 15px 0; /* Уменьшил отступы */
        color: #000;
        font-weight: 700;
    }
    /* Стили для страницы переводов */
    .transfer-container {
        max-width: 460px;
        margin: 0 auto;
        padding: 20px;
        background: white;
        border-radius: 10px;
        box-shadow: var(--card-shadow);
    }

    .transfer-title {
        font-size: 22.9px;
        font-weight: 700;
        margin-bottom: 20px;
    }

    .transfer-option {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 15px;
        background: white;
        border-radius: 12px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
        margin-bottom: 20px;
    }

    .transfer-arrow {
        background: var(--primary-color);
        color: white;
        border: none;
        border-radius: 8px;
        padding: 10px 14px;
        cursor: pointer;
    }

    .recent-users-container {
        width: 100%;
        overflow-x: auto;
        margin-bottom: 20px;
        padding-bottom: 10px;
        padding-top: 15px; /* Добавлено */
        min-height: 120px; /* Добавлено */
    }

    .recent-users {
        display: flex;
        gap: 12px;
        width: max-content;
    }

    .recent-user {
        display: flex;
        flex-direction: column;
        align-items: center;
        min-width: 80px;
    }

    .user-avatar {
        width: 70px;
        height: 70px;
        border-radius: 50%;
        background: white;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: 700;
        font-size: 17px;
        color: #222;
        position: relative;
        margin-bottom: 6px;
    }

    .avatar-close {
        position: absolute;
        top: -6px;
        right: -6px;
        width: 16px;
        height: 16px;
        background: #f44336;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 10px;
        font-weight: 700;
        cursor: pointer;
        z-index: 2;
    }

    .user-name {
        font-size: 12px;
        color: #333;
        text-align: center;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        max-width: 80px;
    }

    .payments-title {
        font-size: 19.8px;
        font-weight: 700;
        margin: 20px 0 15px;
    }

    .payment-option {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 11px 14px;
        background: white;
        border-radius: 10px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.04);
        margin-bottom: 15px;
        cursor: pointer;
        transition: all 0.2s;
    }

        .payment-option:hover {
            background-color: #f5f7ff;
            transform: translateY(-2px);
        }

    /* Аватар и баланс */
    .avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        overflow: hidden;
        cursor: pointer;
        background: #eee;
        display: flex;
        align-items: center;
        justify-content: center;
    }

        .avatar img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

    .user-panel {
        display: flex;
        align-items: center;
        gap: 15px;
    }

    .balance {
        text-align: right;
    }

    .balance-label {
        display: block;
        font-size: 12px;
        color: #666;
    }

    .balance-amount {
        font-size: 16px;
        font-weight: 700;
    }

    .transfer-input {
        border: none;
        outline: none;
        background: transparent;
        width: 100%;
        font-size: 15px;
        color: #222222;
        font-family: 'Inter', sans-serif;
    }

    .transfer-confirmation {
        max-width: 500px;
        margin: 20px auto;
        padding: 20px;
        background: white;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }

    .form-section {
        margin-bottom: 20px;
        padding: 15px;
        background: #f9f9f9;
        border-radius: 8px;
    }

    .amount-input {
        display: flex;
        align-items: center;
        gap: 10px;
    }

        .amount-input input {
            flex: 1;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            font-size: 16px;
        }

    .confirmation-section {
        margin-top: 20px;
        padding: 15px;
        background: #f0f8ff;
        border-radius: 8px;
    }

    .confirm-button {
        background: #4CAF50;
        color: white;
        padding: 12px 20px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 16px;
        margin-top: 20px;
        width: 100%;
    }

    .cancel-button {
        background: #f44336;
        color: white;
        padding: 12px 20px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 16px;
        margin-top: 10px;
        width: 100%;
    }

    textarea {
        width: 100%;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 5px;
        min-height: 80px;
        font-family: inherit;
    }

    .recent-user {
        cursor: pointer;
        transition: transform 0.2s;
    }

        .recent-user:hover {
            transform: scale(1.05);
        }

    .avatar-close {
        position: absolute;
        top: -5px;
        right: -5px;
        width: 20px;
        height: 20px;
        background: #ff4444;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 12px;
        z-index: 2;
        opacity: 0;
        transition: opacity 0.2s;
    }

    .recent-user:hover .avatar-close {
        opacity: 1;
    }

    .avatar-close:hover {
        background: #cc0000;
    }
</style>

<div class="screen">
    <!-- Шапка (как в MainScreen) -->
    <div class="header">
        <div class="logo" @onclick="NavigateToMain">MoneyFlow</div>
        <div class="user-panel">
            <div class="balance">
                <span class="balance-label">Баланс</span>
                <span class="balance-amount">@(currentBalance?.ToString("N0") ?? "0") ₽</span>
            </div>
            <div class="avatar" @onclick="NavigateToAccount">
                <img src="img/avatar.svg" alt="Аватар" />
            </div>
        </div>
    </div>

    <!-- Боковая панель (как в MainScreen) -->
    <div class="sidebar">
        <div class="sidebar-item" @onclick="NavigateToHistory">
            <img src="img/history-icon.svg" alt="История" />
            <span>История</span>
        </div>
        <div class="sidebar-item active" @onclick="NavigateToTransfers">
            <img src="img/transfers-icon.svg" alt="Переводы" />
            <span>Переводы</span>
        </div>
        <div class="sidebar-item" @onclick="NavigateToInvestments">
            <img src="img/investments-icon.svg" alt="Инвестиции" />
            <span>Инвестиции</span>
        </div>

        @if (isAdmin)
        {
            <div class="sidebar-item" @onclick="NavigateToAdmin">
                <img src="img/admin-icon.svg" alt="Админ-панель" />
                <span>Админ-панель</span>
            </div>
        }
    </div>

    <!-- Основной контент -->
    <div class="admin-content">
        <h1 class="page-title">Переводы</h1>

        <div class="transfer-container">

            <div class="transfer-option">
                <input type="text"
                       class="transfer-input"
                       @bind="transferTarget"
                       placeholder="На MoneyFlow или в другой" />
                <button class="transfer-arrow" @onclick="HandleTransfer">→</button>
            </div>
            @if (showTransferForm)
            {
                <div class="transfer-confirmation">
                    <h2>Новый перевод</h2>

                    <div class="form-section">
                        <h3>Получатель</h3>
                        <div class="recipient-info">@recipientEmail</div>
                    </div>

                    <div class="form-section">
                        <h3>Детали перевода</h3>
                        <div class="amount-input">
                            <input type="number" @bind="transferAmount" placeholder="Сумма" />
                            <span>₽</span>
                        </div>
                    </div>

                    <div class="form-section">
                        <h3>Комментарий</h3>
                        <textarea @bind="comment" placeholder="Назначение платежа"></textarea>
                    </div>

                    <div class="confirmation-section">
                        <h3>Подтверждение</h3>
                        <div><strong>Получатель:</strong> @recipientEmail</div>
                        <div><strong>Сумма:</strong> @transferAmount ₽</div>
                        <div><strong>Комментарий:</strong> @(string.IsNullOrEmpty(comment) ? "Без комментария" : comment)</div>
                    </div>

                    <button @onclick="ExecuteTransfer" class="confirm-button">Подтвердить перевод</button>
                    <button @onclick="CancelTransfer" class="cancel-button">Отмена</button>
                </div>
            }
            <div class="recent-users-container">
                <div class="recent-users">
                    @foreach (var user in recentUsers)
                    {
                        <div class="recent-user" @onclick="() => StartQuickTransfer(user)">
                            <div class="user-avatar">
                                @GetInitials(user.Name)
                                <div class="avatar-close" @onclick:stopPropagation="true" @onclick="() => RemoveUser(user)">×</div>
                            </div>
                            <div class="user-name">@GetShortName(user.Name)</div>
                        </div>
                    }
                </div>
            </div>

            <div class="payments-title">Оплатить</div>

            <div class="payment-option">
                <div>Оплата по QR</div>
                <div></div>
            </div>
            <div class="payment-option">
                <div>Дом</div>
                <div></div>
            </div>
            <div class="payment-option">
                <div>Мобильная связь</div>
                <div></div>
            </div>
            <div class="payment-option">
                <div>Транспорт</div>
                <div></div>
            </div>
            <div class="payment-option" >
                <div>Государство</div>
                <div></div>
            </div>
            <div class="payment-option" >
                <div>Образование</div>
                <div></div>
            </div>
            <div class="payment-option" >
                <div>Отдых и развлечения</div>
                <div></div>
            </div>
            <div class="payment-option" >
                <div>Работа и финансы</div>
                <div></div>
            </div>
            <div class="payment-option">
                <div>Здоровье</div>
                <div></div>
            </div>
        </div>
    </div>
</div>

@code {
    private decimal? currentBalance;
    private ClaimsPrincipal user;
    private string userId;
    private bool isAdmin = false;
    private string searchQuery = string.Empty;
    public string transferTarget = string.Empty;
    private List<User> recentUsers = new List<User>();
    private List<User> searchResults = new List<User>();

    private bool showTransferForm = false;
    private string recipientEmail = string.Empty;
    public decimal transferAmount = 0;
    private string comment = string.Empty;
    public User targetUser;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;
        userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;

        await LoadUserBalance();
        await ProcessAuthState(authState);
        await LoadRecentUsers(); // Загружаем последних пользователей
    }

    //для отображение админ панели, если админ
    private async Task ProcessAuthState(AuthenticationState authState)
    {
        user = authState.User;

        if (user.Identity is { IsAuthenticated: true })
        {
            userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;

            // Получаем роль из claims
            var roleClaim = user.FindFirst(ClaimTypes.Role)?.Value;
            isAdmin = roleClaim == "1";

            await JSRuntime.InvokeVoidAsync("console.log",
                $"User ID: {userId}, Role: {roleClaim}, IsAdmin: {isAdmin}");

            if (!string.IsNullOrEmpty(userId))
                await LoadUserBalance();
        }
        else
        {
            isAdmin = false;
            await JSRuntime.InvokeVoidAsync("console.log", "Пользователь не авторизирован");
        }

        StateHasChanged();
    }

    private async Task LoadRecentUsers()
    {
        try
        {
            var response = await Http.GetAsync($"api/UserAccount/recent-users/{userId}");
            if (response.IsSuccessStatusCode)
            {
                recentUsers = await response.Content.ReadFromJsonAsync<List<User>>() ?? new List<User>();
                // Дополнительная фильтрация на клиенте (на всякий случай)
                recentUsers = recentUsers.Where(u => u.UserId != int.Parse(userId)).ToList();
            }
        }
        catch
        {
            recentUsers = new List<User>();
        }
    }

    private async Task LoadUserBalance()
    {
        try
        {
            var response = await Http.GetAsync($"api/Budget/users/{userId}");
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
                var budget = JsonSerializer.Deserialize<Budget>(content, options);
                currentBalance = budget?.Amount;
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", ex.Message);
        }
    }

    public async Task HandleTransfer()
    {
        if (string.IsNullOrWhiteSpace(transferTarget))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Введите ID или email пользователя");
            return;
        }

        try
        {
            // Проверка на самого себя по email
            var currentUserEmail = user.FindFirst(ClaimTypes.Email)?.Value;
            if (transferTarget.Equals(currentUserEmail, StringComparison.OrdinalIgnoreCase))
            {
                await JSRuntime.InvokeVoidAsync("alert", "Нельзя перевести самому себе");
                return;
            }

            // Сначала пробуем найти по ID (если ввод - число)
            if (int.TryParse(transferTarget, out int targetUserId))
            {
                // Проверка на самого себя по ID
                if (targetUserId == int.Parse(userId))
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Нельзя перевести самому себе");
                    return;
                }

                var response = await Http.GetAsync($"api/UserAccount/{targetUserId}");
                if (response.IsSuccessStatusCode)
                {
                    targetUser = await response.Content.ReadFromJsonAsync<User>();
                    recipientEmail = targetUser.Email;
                    showTransferForm = true;
                    StateHasChanged();
                    return;
                }
            }

            // Поиск по email
            var emailResponse = await Http.GetAsync($"api/UserAccount/by-email/{transferTarget}");
            if (!emailResponse.IsSuccessStatusCode)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Пользователь не найден");
                return;
            }

            targetUser = await emailResponse.Content.ReadFromJsonAsync<User>();
            recipientEmail = targetUser.Email;
            showTransferForm = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", ex.Message);
            await JSRuntime.InvokeVoidAsync("alert", $"Ошибка: {ex.Message}");
        }
    }

    public async Task ExecuteTransfer()
    {
        try
        {
            if (transferAmount <= 0)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Введите корректную сумму");
                return;
            }
            if (currentBalance < transferAmount)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Недостаточно средств");
                return;
            }

            var transferRequest = new TransferRequest
                {
                    FromUserId = int.Parse(userId),
                    ToUserId = targetUser.UserId,
                    Amount = transferAmount,
                    Comment = string.IsNullOrWhiteSpace(comment) ? "Без комментария" : comment
                };

            var response = await Http.PostAsJsonAsync("api/UserAccount/secure-transfer", transferRequest);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<TransferResult>();
                await JSRuntime.InvokeVoidAsync("alert", "Перевод выполнен успешно");

                // Проверяем статус транзакции
                var statusResponse = await Http.GetAsync($"api/UserAccount/transaction-status/{result.TransactionId}");
                if (statusResponse.IsSuccessStatusCode)
                {
                    var status = await statusResponse.Content.ReadFromJsonAsync<TransactionStatusResponse>();
                    await JSRuntime.InvokeVoidAsync("console.log", $"Статус транзакции: {status.Status}");
                }

                showTransferForm = false;
                await LoadUserBalance();
                StateHasChanged();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                await JSRuntime.InvokeVoidAsync("alert", $"Ошибка: {error}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", ex.Message);
            await JSRuntime.InvokeVoidAsync("alert", $"Ошибка при переводе: {ex.Message}");
        }
    }

    private void CancelTransfer()
    {
        showTransferForm = false;
        transferAmount = 0;
        comment = string.Empty;
    }

    private async Task RemoveUser(User userToRemove)
    {
        recentUsers = recentUsers.Where(u => u.UserId != userToRemove.UserId).ToList();

        try
        {
            var response = await Http.DeleteAsync($"api/transfers/recent-users/{userId}/{userToRemove.UserId}");
            if (!response.IsSuccessStatusCode)
            {
                await JSRuntime.InvokeVoidAsync("console.error", "Ошибка при удалении пользователя из списка");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", ex.Message);
        }
    }

    public string GetInitials(string name)
    {
        if (string.IsNullOrWhiteSpace(name))
            return "??";

        var parts = name.Split(' ');
        if (parts.Length >= 2)
            return $"{parts[0][0]}{parts[1][0]}".ToUpper();

        return name.Length >= 2 ? name.Substring(0, 2).ToUpper() : name.ToUpper();
    }

    public string GetShortName(string name)
    {
        if (string.IsNullOrWhiteSpace(name))
            return "??";

        var parts = name.Split(' ');
        if (parts.Length >= 2)
            return $"{parts[0]} {parts[1][0]}.";

        return name.Length > 10 ? $"{name.Substring(0, 8)}..." : name;
    }
    private void StartQuickTransfer(User user)
    {
        // Дополнительная проверка (хотя сервер уже не должен возвращать текущего пользователя)
        if (user.UserId == int.Parse(userId))
        {
            JSRuntime.InvokeVoidAsync("alert", "Нельзя выбрать себя");
            return;
        }

        targetUser = user;
        transferTarget = user.Email;
        recipientEmail = user.Email;
        showTransferForm = true;
        StateHasChanged();
    }
    // Модели для клиента
    public class TransferResult
    {
        public string Message { get; set; }
        public int TransactionId { get; set; }
    }

    public class TransactionStatusResponse
    {
        public int TransactionId { get; set; }
        public string Status { get; set; }
        public decimal Amount { get; set; }
        public DateTime Date { get; set; }
    }

    // Модели данных
    public class User
    {
        public int UserId { get; set; }
        public string Name { get; set; }
        public string Email { get; set; }
    }

    public class Budget
    {
        public decimal Amount { get; set; }
    }

    public class TransferRequest
    {
        public int FromUserId { get; set; }
        public int ToUserId { get; set; }
        public decimal Amount { get; set; }
        public string Comment { get; set; }
    }

    // Методы навигации
    private void NavigateToMain() => Navigation.NavigateTo("/main");
    private void NavigateToHistory() => Navigation.NavigateTo("/history");
    private void NavigateToTransfers() => Navigation.NavigateTo("/transfers");
    private void NavigateToInvestments() => Navigation.NavigateTo("/investments");
    private void NavigateToAdmin() => Navigation.NavigateTo("/admin");
    private void NavigateToAccount() => Navigation.NavigateTo("/account");
}