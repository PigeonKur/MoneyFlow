@page "/admin"
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using System.Security.Claims
@using System.Text.Json

<link href="css/account.css" rel="stylesheet" />

<style>
	:root {
		--primary-color: #2e86de;
		--sidebar-width: 110px;
		--header-height: 70px;
		--card-shadow: 0 2px 10px rgba(0, 0, 0, 0.08);
	}

	body {
		margin: 0;
		font-family: 'Inter', sans-serif;
		background-color: #f8f9fd;
		color: #000000;
	}

	.screen {
		display: grid;
		grid-template-columns: var(--sidebar-width) 1fr;
		min-height: 100vh;
	}

	.header {
		grid-column: 2;
		grid-row: 1;
		display: flex;
		justify-content: space-between;
		align-items: center;
		padding: 0 25px;
		background: #ffffff;
		box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
		z-index: 100;
		height: var(--header-height);
	}

	.logo {
		font-size: 24px;
		font-weight: 700;
		color: var(--primary-color);
	}

	.sidebar {
		grid-column: 1;
		grid-row: 1 / span 2;
		background: #ffffff;
		box-shadow: 1px 0 3px rgba(0, 0, 0, 0.1);
		padding-top: 15px;
		display: flex;
		flex-direction: column;
		align-items: center;
		z-index: 90;
	}

	.sidebar-item {
		width: 100%;
		padding: 25px 0;
		display: flex;
		flex-direction: column;
		align-items: center;
		gap: 10px;
		cursor: pointer;
		font-size: 12px;
		color: #555;
		transition: all 0.2s;
	}

		.sidebar-item:hover {
			background: #f5f7ff;
		}

		.sidebar-item.active {
			color: var(--primary-color);
			background: #f0f4ff;
		}

		.sidebar-item img {
			width: 60px;
			height: 60px;
		}

	
	.admin-content {
		grid-column: 2;
		grid-row: 2;
		padding: 30px 40px;
		background-color: #f8f9fd;
		margin-left: 50px;
	}

		.admin-content h1 {
			font-size: 24px;
			margin-bottom: 30px;
			color: #000;
			font-weight: 700;
		}

	.admin-card {
		background: white;
		border-radius: 10px;
		padding: 25px;
		margin-bottom: 30px; 
		box-shadow: var(--card-shadow);
	}

		.admin-card h2 {
			font-size: 18px;
			margin: 0 0 25px 0; 
			color: #000;
			font-weight: 700;
		}

	.admin-table {
		width: 100%;
		border-collapse: collapse;
	}

		.admin-table th, .admin-table td {
			padding: 12px 15px;
			text-align: left;
			border-bottom: 1px solid #eee;
		}

		.admin-table th {
			background-color: #f5f7ff;
			font-weight: 600;
		}

	/* Статистика */
	.stats-grid {
		display: grid;
		grid-template-columns: repeat(3, 1fr);
		gap: 20px;
	}

	.stat-item {
		background: #f5f7ff;
		border-radius: 8px;
		padding: 20px;
		text-align: center;
	}

	.stat-value {
		font-size: 24px;
		font-weight: 700;
		margin-bottom: 10px;
		color: var(--primary-color);
	}

	.stat-label {
		font-size: 14px;
		color: #666;
	}

	/* Кнопки действий */
	.action-btn {
		padding: 6px 12px;
		border-radius: 4px;
		cursor: pointer;
		border: none;
		margin-right: 5px;
	}

	.edit-btn {
		background-color: var(--primary-color);
		color: white;
	}

	.delete-btn {
		background-color: #ff6b6b;
		color: white;
	}

	.avatar {
		width: 40px;
		height: 40px;
		border-radius: 50%;
		overflow: hidden;
		cursor: pointer;
		background: #eee;
		display: flex;
		align-items: center;
		justify-content: center;
	}

		.avatar img {
			width: 100%;
			height: 100%;
			object-fit: cover;
		}

	.user-panel {
		display: flex;
		align-items: center;
		gap: 15px;
	}

	.balance {
		text-align: right;
	}

	.balance-label {
		display: block;
		font-size: 12px;
		color: #666;
	}

	.balance-amount {
		font-size: 16px;
		font-weight: 700;
	}

	.edit-form {
		background: #f9f9f9;
		border-radius: 8px;
		padding: 20px;
		margin-top: 20px;
		box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
	}

	.form-group {
		margin-bottom: 15px;
	}

	.form-label {
		display: block;
		margin-bottom: 5px;
		font-weight: 500;
		color: #555;
	}

	.form-control {
		width: 100%;
		padding: 8px 12px;
		border: 1px solid #ddd;
		border-radius: 4px;
		font-size: 14px;
	}

	.form-actions {
		display: flex;
		justify-content: flex-end;
		gap: 10px;
		margin-top: 20px;
	}

	.btn {
		padding: 8px 16px;
		border-radius: 4px;
		cursor: pointer;
		font-size: 14px;
		border: none;
	}

	.btn-primary {
		background-color: var(--primary-color);
		color: white;
	}

	.btn-secondary {
		background-color: #f0f0f0;
		color: #333;
	}
</style>

<div class="screen">
	<div class="header">
		<div class="logo" @onclick="NavigateToMain">
			MoneyFlow
			Admin
		</div>
		<div class="user-panel">
			<div class="balance">
				<span class="balance-label">Баланс</span>
				<span class="balance-amount">@(currentBalance?.ToString("N0") ?? "0") Р</span>
			</div>
			<div class="avatar" @onclick="NavigateToAccount">
				<img src="@_avatarUrl" alt="Аватар"
					 onerror="this.src='https://ymzpnhfzzfkopqvrudiz.supabase.co/storage/v1/object/sign/avatar/avatar.svg?token=eyJraWQiOiJzdG9yYWdlLXVybC1zaWduaW5nLWtleV9jNTBhNTJhOS1kMzYyLTRjMWUtOGMyNi0wNDM3Yjg2ZTIwYzkiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJhdmF0YXIvYXZhdGFyLnN2ZyIsImlhdCI6MTc1MDY3ODQ4NywiZXhwIjoxNzgyMjE0NDg3fQ.2MejLtqa8h0_90wYdz_Z4g4WORZnx2itSRRnm4CzpR8'" />
			</div>
		</div>
	</div>

	<div class="sidebar">
		<div class="sidebar-item" @onclick="NavigateToHistory">
			<img src="img/history-icon.svg" alt="История" />
			<span>История</span>
		</div>
		<div class="sidebar-item" @onclick="NavigateToTransfers">
			<img src="img/transfers-icon.svg" alt="Переводы" />
			<span>Переводы</span>
		</div>
		<div class="sidebar-item" @onclick="NavigateToInvestments">
			<img src="img/investments-icon.svg" alt="Инвестиции" />
			<span>Инвестиции</span>
		</div>
		<div class="sidebar-item active" @onclick="NavigateToAdmin">
			<img src="img/admin-icon.svg" alt="Админ-панель" />
			<span>Админ-панель</span>
		</div>
	</div>

	<!-- Основной контент админки -->
	<div class="admin-content">
		<h1>Административная панель</h1>

		<!-- Карточка управления пользователями -->
		<div class="admin-card">
			<h2>Управление пользователями</h2>
			<div class="admin-card">
				<h2>Управление пользователями</h2>

				@if (editingUser != null)
				{
					<div class="edit-form">
						<h3>Редактирование пользователя</h3>
						<div class="form-group">
							<label class="form-label">Имя</label>
							<input type="text" class="form-control" @bind="editingUser.Name" />
						</div>
						<div class="form-group">
							<label class="form-label">Email</label>
							<input type="email" class="form-control" @bind="editingUser.Email" />
						</div>
						<div class="form-group">
							<label class="form-label">Роль</label>
							<select class="form-control" @bind="editingUser.RoleId">
								<option value="1">Админ</option>
								<option value="2">Пользователь</option>
							</select>
						</div>
						<div class="form-actions">
							<button class="btn btn-secondary" @onclick="CancelEdit">Отмена</button>
							<button class="btn btn-primary" @onclick="SaveUser">Сохранить</button>
						</div>
					</div>
				}

				<div class="table-responsive">
					<table class="admin-table">
						<thead>
							<tr>
								<th>ID</th>
								<th>Имя</th>
								<th>Email</th>
								<th>Роль</th>
								<th>Действия</th>
							</tr>
						</thead>
						<tbody>
							@if (users != null)
							{
								@foreach (var user in users)
								{
									<tr>
										<td>@user.UserId</td>
										<td>@user.Name</td>
										<td>@user.Email</td>
										<td>@(user.RoleId == 1 ? "Админ" : "Пользователь")</td>
										<td>
											<button class="action-btn edit-btn" @onclick="() => EditUser(user.UserId)">
												Редактировать
											</button>
											<button class="action-btn delete-btn" @onclick="() => DeleteUser(user.UserId)">
												Удалить
											</button>
										</td>
									</tr>
								}
							}
							else
							{
								<tr>
									<td colspan="5">Загрузка данных...</td>
								</tr>
							}
						</tbody>
					</table>
				</div>
			</div>

			<!-- Карточка статистики -->
			<div class="admin-card">
				<h2>Статистика системы</h2>
				<div class="stats-grid">
					<div class="stat-item">
						<div class="stat-value">@totalUsers</div>
						<div class="stat-label">Пользователей</div>
					</div>
					<div class="stat-item">
						<div class="stat-value">@totalTransactions</div>
						<div class="stat-label">Транзакций</div>
					</div>
					<div class="stat-item">
						<div class="stat-value">@totalBalance.ToString("N0")</div>
						<div class="stat-label">Общий баланс</div>
					</div>
					<div class="stat-item">
						<div class="stat-value">@totalInvestmentsAmount.ToString("N0")</div>
						<div class="stat-label">Сумма инвестиций </div>
					</div>

				</div>
			</div>
		</div>
	</div>
</div>


@code {
	private decimal? currentBalance;
	private List<User> users;
	private ClaimsPrincipal? user;
	private int totalUsers;
	private int totalTransactions;
	private decimal totalBalance;
	private User editingUser; 
	private string? userId;
	private bool isAdmin = false;
	private string? _userName;
	private string? _email;
	private string _avatarUrl = "https://ymzpnhfzzfkopqvrudiz.supabase.co/storage/v1/object/sign/avatar/avatar.svg?token=eyJraWQiOiJzdG9yYWdlLXVybC1zaWduaW5nLWtleV9jNTBhNTJhOS1kMzYyLTRjMWUtOGMyNi0wNDM3Yjg2ZTIwYzkiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJhdmF0YXIvYXZhdGFyLnN2ZyIsImlhdCI6MTc1MDY3NzcyNSwiZXhwIjoxNzgyMjEzNzI1fQ.nooWtvyI88n56xp0E0cANLdW2WznFL-9HpRnOuQVMUA"; // URL по умолчанию
	private string? _userEmail;
	private decimal totalInvestmentsAmount;

	[Inject]
	private Supabase.Client? Supabase { get; set; }
	private void NavigateToMain() => Navigation.NavigateTo("/main");
	private void NavigateToHistory() => Navigation.NavigateTo("/history");
	private void NavigateToTransfers() => Navigation.NavigateTo("/transfers");
	private void NavigateToInvestments() => Navigation.NavigateTo("/investments");
	private void NavigateToAdmin() => Navigation.NavigateTo("/admin");
	private void NavigateToAccount() => Navigation.NavigateTo("/account");

	public class User
	{
		public int UserId { get; set; }
		public string Name { get; set; }
		public string Email { get; set; }
		public int RoleId { get; set; }
	}

	public class AdminStats
	{
		public int TotalUsers { get; set; }
		public int TotalTransactions { get; set; }
		public decimal TotalBalance { get; set; }
		public decimal TotalInvestmentsAmount { get; set; }
	}

	private class CardsTotalResponse
	{
		public decimal Total { get; set; }
	}
	public class AdminUpdateUserModel
	{
		public string Name { get; set; }
		public string Email { get; set; }
		public int RoleId { get; set; }
	}
	public class UserData
	{
		public string Name { get; set; }
		public string Email { get; set; }
		public string AvatarUrl { get; set; }
	}
	protected override async Task OnInitializedAsync()
	{
		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		user = authState.User;
		await ProcessAuthState(authState);

		await LoadAdminData();
	}
	private async Task ProcessAuthState(AuthenticationState authState)
	{
		user = authState.User;

		if (user.Identity is { IsAuthenticated: true })
		{
			userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
			_userEmail = user.FindFirst(ClaimTypes.Email)?.Value; // Получаем email пользователя

			// Получаем роль из claims
			var roleClaim = user.FindFirst(ClaimTypes.Role)?.Value;
			isAdmin = roleClaim == "1";

			await JSRuntime.InvokeVoidAsync("console.log",
				$"User ID: {userId}, Role: {roleClaim}, IsAdmin: {isAdmin}");

			if (!string.IsNullOrEmpty(userId))
			{
				await LoadUserBalance();
				await LoadUserData();
			}
		}
		else
		{
			isAdmin = false;
			await JSRuntime.InvokeVoidAsync("console.log", "Пользователь не авторизирован");
		}

		StateHasChanged();
	}
	private async Task LoadUserData()
	{
		try
		{
			var response = await Http.GetAsync($"api/UserAccount/{userId}/with-avatar");
			if (response.IsSuccessStatusCode)
			{
				var userData = await response.Content.ReadFromJsonAsync<UserData>();

				// Инициализируем значения по умолчанию для null
				_userName = userData?.Name ?? string.Empty;
				_email = userData?.Email ?? string.Empty;

				// Используем URL аватарки из базы данных или fallback
				_avatarUrl = userData?.AvatarUrl ?? "https://placehold.co/40";

				StateHasChanged();
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Ошибка загрузки данных пользователя: {ex.Message}");
			_avatarUrl = "https://placehold.co/40";
			_userName = string.Empty;
			_email = string.Empty;
			StateHasChanged();
		}
	}

	private async Task<bool> CheckIfAvatarExists(string fileName)
	{
		if (Supabase == null) return false;

		try
		{
			var list = await Supabase.Storage
				.From("avatar")
				.List();

			return list.Any(f => f.Name == fileName);
		}
		catch
		{
			return false;
		}
	}
	
	private async Task LoadUserBalance()
	{
		try
		{
			var response = await Http.GetAsync($"api/Budget/users/{userId}/cards-total");
			if (response.IsSuccessStatusCode)
			{
				var content = await response.Content.ReadFromJsonAsync<CardsTotalResponse>();
				currentBalance = content?.Total ?? 0;
			}
		}
		catch (Exception ex)
		{
			await JSRuntime.InvokeVoidAsync("console.error", $"Ошибка загрузки баланса: {ex.Message}");
		}
		finally
		{
			StateHasChanged();
		}
	}

	private async Task LoadAdminData()
	{
		try
		{
			var usersResponse = await Http.GetAsync("api/UserAccount");
			if (usersResponse.IsSuccessStatusCode)
			{
				var content = await usersResponse.Content.ReadAsStringAsync();
				var loadedUsers = JsonSerializer.Deserialize<List<User>>(content, new JsonSerializerOptions
					{
						PropertyNameCaseInsensitive = true
					});

				users = loadedUsers?.OrderBy(u => u.UserId).ToList();
				totalUsers = users?.Count ?? 0;
			}

			var statsResponse = await Http.GetAsync("api/UserAccount/stats");
			if (statsResponse.IsSuccessStatusCode)
			{
				var stats = await statsResponse.Content.ReadFromJsonAsync<AdminStats>();
				totalTransactions = stats?.TotalTransactions ?? 0;
				totalBalance = stats?.TotalBalance ?? 0;
				totalInvestmentsAmount = stats?.TotalInvestmentsAmount ?? 0;
			}

		}
		catch (Exception ex)
		{
			await JSRuntime.InvokeVoidAsync("console.error", $"Ошибка загрузки данных: {ex.Message}");
		}
	}


	private async Task EditUser(int userId)
	{
		editingUser = users.FirstOrDefault(u => u.UserId == userId);
		if (editingUser == null)
		{
			await JSRuntime.InvokeVoidAsync("alert", "Пользователь не найден");
		}
	}
	private async Task SaveUser()
	{
		try
		{
			if (editingUser == null) return;

			var updateModel = new AdminUpdateUserModel
				{
					Name = editingUser.Name,
					Email = editingUser.Email,
					RoleId = editingUser.RoleId
				};

			var response = await Http.PutAsJsonAsync($"api/UserAccount/admin-update/{editingUser.UserId}", updateModel);

			if (response.IsSuccessStatusCode)
			{
				await JSRuntime.InvokeVoidAsync("alert", "Данные пользователя обновлены");
				editingUser = null;
				await LoadAdminData();
			}
			else
			{
				var error = await response.Content.ReadAsStringAsync();
				await JSRuntime.InvokeVoidAsync("alert", $"Ошибка: {error}");
			}
		}
		catch (Exception ex)
		{
			await JSRuntime.InvokeVoidAsync("alert", $"Ошибка: {ex.Message}");
		}
	}
	private void CancelEdit()
	{
		editingUser = null;
	}
	private async Task DeleteUser(int userId)
	{
		var confirmed = await JSRuntime.InvokeAsync<bool>("confirm",
			"Вы уверены, что хотите удалить этого пользователя?");

		if (!confirmed) return;

		var response = await Http.DeleteAsync($"api/UserAccount/{userId}");
		if (response.IsSuccessStatusCode)
		{
			await LoadAdminData();
			await JSRuntime.InvokeVoidAsync("alert", "Пользователь успешно удален");
		}
		else
		{
			await JSRuntime.InvokeVoidAsync("alert", "Ошибка при удалении пользователя");
		}
	}

}