@page "/investments"
@inject NavigationManager Navigation
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using System.Text.Json
@using System.Text.Json.Serialization
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime

<link href="css/account.css" rel="stylesheet" />

<style>
    /* Основные стили (такие же как в MainScreen) */
    :root {
        --primary-color: #2e86de;
        --sidebar-width: 110px;
        --header-height: 70px;
        --card-shadow: 0 2px 10px rgba(0, 0, 0, 0.08);
        --border-color: #eae6e6;
    }

    body {
        margin: 0;
        font-family: 'Inter', sans-serif;
        background-color: #f8f9fd;
        color: #000000;
    }

    /* Общая структура */
    .screen {
        display: grid;
        grid-template-columns: var(--sidebar-width) 1fr;
        grid-template-rows: var(--header-height) 1fr;
        min-height: 100vh;
    }

    /* Шапка (точно такая же как в MainScreen) */
    .header {
        grid-column: 2;
        grid-row: 1;
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0 25px;
        background: #ffffff;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        z-index: 100;
        height: var(--header-height);
    }

    .main-content {
        grid-column: 2;
        grid-row: 2;
        padding: 15px 20px;
        background-color: #f8f9fd;
        margin-top: 0px;
        margin-left: 35px;
    }
    .logo {
        font-size: 24px;
        font-weight: 700;
        color: var(--primary-color);
    }

    /* Боковая панель (точно такая же как в MainScreen) */
    .sidebar {
        grid-column: 1;
        grid-row: 1 / span 2;
        background: #ffffff;
        box-shadow: 1px 0 3px rgba(0, 0, 0, 0.1);
        padding-top: 15px;
        display: flex;
        flex-direction: column;
        align-items: center;
        z-index: 90;
    }

    .sidebar-item {
        width: 100%;
        padding: 25px 0;
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 10px;
        cursor: pointer;
        font-size: 12px;
        color: #555;
        transition: all 0.2s;
    }

        .sidebar-item:hover {
            background: #f5f7ff;
        }

        .sidebar-item.active {
            color: var(--primary-color);
            background: #f0f4ff;
        }

        .sidebar-item img {
            width: 60px;
            height: 60px;
        }

    /* Основное содержимое страницы Account */
    .account-content {
        grid-column: 2;
        grid-row: 2;
        padding: 30px;
        background-color: #f8f9fd;
    }

    /* Стили для карточек в Account */
    .account-card {
        background: white;
        border-radius: 10px;
        padding: 20px;
        margin-bottom: 20px;
        box-shadow: var(--card-shadow);
    }

    .account-header {
        font-size: 18px;
        font-weight: 700;
        margin-bottom: 15px;
    }

    .accounts-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 15px;
        margin-top: 20px;
    }

    .account-item {
        background: white;
        border-radius: 10px;
        padding: 15px;
        box-shadow: var(--card-shadow);
        display: flex;
        align-items: center;
    }

    .account-icon {
        font-size: 24px;
        margin-right: 15px;
    }

    .account-details {
        flex: 1;
    }

    .account-amount {
        font-weight: 700;
        font-size: 16px;
    }

    .account-description {
        color: #666;
        font-size: 14px;
    }

    /* Панель пользователя (точно такая же как в MainScreen) */
    .user-panel {
        display: flex;
        align-items: center;
        gap: 15px;
    }

    .balance {
        text-align: right;
    }

    .balance-label {
        display: block;
        font-size: 12px;
        color: #666;
    }

    .balance-amount {
        font-size: 16px;
        font-weight: 700;
    }

    .avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        overflow: hidden;
        cursor: pointer;
        background: #eee;
        display: flex;
        align-items: center;
        justify-content: center;
    }

        .avatar img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

    .page-title {
        font-size: 22px;
        margin: 0 0 35px 0;
        color: #000;
        font-weight: 700;
    }

    .investments-row {
        display: flex;
        gap: 20px;
        margin-bottom: 20px;
    }

    .investment-card {
        background: white;
        border-radius: 20px;
        padding: 25px;
        box-shadow: var(--card-shadow);
        flex: 1;
    }

    .wide-card {
        flex: 2;
    }

    .investment-card-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }

        .investment-card-header h2 {
            font-size: 23px;
            font-weight: 700;
            color: #333;
            margin: 0;
        }

    .period-selector select {
        padding: 6px 12px;
        border-radius: 5px;
        border: 1px solid #8a8484;
        background-color: white;
        font-size: 13px;
        font-weight: bold;
    }

    .chart-container {
        height: 300px;
        background: white;
        border-radius: 12px;
        box-shadow: 0px 1px 4px rgba(0, 0, 0, 0.08);
    }

    .chart-placeholder {
        width: 100%;
        height: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
        background: linear-gradient(0deg, rgba(255,255,255,1) 0%, rgba(255,255,255,1) 100%);
    }

        .chart-placeholder img {
            max-width: 100%;
            max-height: 100%;
        }

    .stocks-list, .transactions-list {
        display: flex;
        flex-direction: column;
        gap: 15px;
    }

    .stock-item, .transaction-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 15px;
        background: white;
        border-radius: 12px;
        box-shadow: 0px 1px 3px rgba(0, 0, 0, 0.08);
    }

    .stock-info, .transaction-info {
        display: flex;
        flex-direction: column;
    }

    .stock-name {
        font-size: 15px;
        color: #333;
    }

    .stock-price {
        font-size: 14px;
        font-weight: 500;
    }

        .stock-price.positive {
            color: #008000;
        }

        .stock-price.negative {
            color: #ff0000;
        }

    .transaction-profit {
        font-size: 14px;
        font-weight: 500;
    }

        .transaction-profit.positive {
            color: #008000;
        }

        .transaction-profit.negative {
            color: #ff0000;
        }

    .buy-button {
        padding: 8px 12px;
        background-color: #4CAF50;
        color: white;
        border: none;
        border-radius: 8px;
        font-size: 13px;
        cursor: pointer;
        transition: background-color 0.2s;
    }

        .buy-button:hover {
            background-color: #3e8e41;
        }
</style>

<div class="screen">
    <!-- Шапка (точно такая же как в MainScreen) -->
    <div class="header">
        <div class="logo" @onclick="NavigateToMain">MoneyFlow</div>
        <div class="user-panel">
            <div class="balance">
                <span class="balance-label">Баланс</span>
                <span class="balance-amount">@(currentBalance?.ToString("N0") ?? "0") ₽</span>
            </div>

            <div class="avatar" @onclick="NavigateToAccount">
                <img src="@_avatarUrl" alt="Аватар"
                     onerror="this.src='https://ymzpnhfzzfkopqvrudiz.supabase.co/storage/v1/object/sign/avatar/avatar.svg?token=eyJraWQiOiJzdG9yYWdlLXVybC1zaWduaW5nLWtleV9jNTBhNTJhOS1kMzYyLTRjMWUtOGMyNi0wNDM3Yjg2ZTIwYzkiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJhdmF0YXIvYXZhdGFyLnN2ZyIsImlhdCI6MTc1MDY3ODQ4NywiZXhwIjoxNzgyMjE0NDg3fQ.2MejLtqa8h0_90wYdz_Z4g4WORZnx2itSRRnm4CzpR8'" />
            </div>
        </div>
    </div>

    <!-- Боковая панель (точно такая же как в MainScreen) -->
    <div class="sidebar">
        <div class="sidebar-item" @onclick="NavigateToHistory">
            <img src="img/history-icon.svg" alt="История" />
            <span>История</span>
        </div>
        <div class="sidebar-item" @onclick="NavigateToTransfers">
            <img src="img/transfers-icon.svg" alt="Переводы" />
            <span>Переводы</span>
        </div>
        <div class="sidebar-item active" @onclick="NavigateToInvestments">
            <img src="img/investments-icon.svg" alt="Инвестиции" />
            <span>Инвестиции</span>
        </div>

        @if (isAdmin)
        {
            <div class="sidebar-item" @onclick="NavigateToAdmin">
                <img src="img/admin-icon.svg" alt="Админ-панель" />
                <span>Админ-панель</span>
            </div>
        }
    </div>
    <div class="main-content">
        <h1 class="page-title">Инвестиции</h1>

        <!-- Первая строка с графиками -->
        <div class="investments-row">
            <!-- График стоимости портфеля -->
            <div class="investment-card wide-card">
                <div class="investment-card-header">
                    <h2>График стоимости портфеля</h2>
                    <div class="period-selector">
                        <select class="period-select" @bind="portfolioPeriod">
                            <option value="year">Год</option>
                            <option value="month">Месяц</option>
                            <option value="week">Неделя</option>
                        </select>
                    </div>
                </div>
                <div class="chart-container">
                    <!-- Здесь будет график -->
                    <div class="chart-placeholder">
                        <img src="img/portfolio-chart.svg" alt="График портфеля" />
                    </div>
                </div>
            </div>

            <!-- Популярные акции -->
            <div class="investment-card">
                <div class="investment-card-header">
                    <h2>Популярные акции</h2>
                </div>
                <div class="stocks-list">
                    @foreach (var stock in popularStocks)
                    {
                        <div class="stock-item">
                            <div class="stock-info">
                                <span class="stock-name">@stock.Name (@stock.Ticker)</span>
                                <span class="stock-price @(stock.ChangePercent >= 0 ? "positive" : "negative")">
                                    @stock.Price.ToString("N2") ₽
                                    <span>(@(stock.ChangePercent >= 0 ? "+" : "")@stock.ChangePercent.ToString("N1")%)</span>
                                </span>
                            </div>
                            <button class="buy-button" @onclick="() => ShowBuyStockModal(stock)">
                                Купить
                            </button>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Вторая строка с графиками -->
        <div class="investments-row">
            <!-- График доходности портфеля -->
            <div class="investment-card wide-card">
                <div class="investment-card-header">
                    <h2>Доходность портфеля</h2>
                    <div class="period-selector">
                        <select class="period-select" @bind="profitabilityPeriod">
                            <option value="year">Год</option>
                            <option value="month">Месяц</option>
                            <option value="week">Неделя</option>
                        </select>
                    </div>
                </div>
                <div class="chart-container">
                    <!-- Здесь будет график -->
                    <div class="chart-placeholder">
                        <img src="img/profitability-chart.svg" alt="График доходности" />
                    </div>
                </div>
            </div>

            <!-- История покупок акций -->
            <div class="investment-card">
                <div class="investment-card-header">
                    <h2>История покупок акций</h2>
                </div>
                <div class="transactions-list">
                    @foreach (var transaction in stockTransactions)
                    {
                        <div class="transaction-item">
                            <div class="transaction-info">
                                <span class="stock-name">@transaction.StockName (@transaction.Ticker) — @transaction.Quantity шт. по @transaction.Price.ToString("N2") ₽</span>
                                <span class="transaction-profit @(transaction.Profit >= 0 ? "positive" : "negative")">
                                    @(transaction.Profit >= 0 ? "+" : "")@transaction.Profit.ToString("N2") ₽
                                </span>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string portfolioPeriod = "year";
    private string profitabilityPeriod = "year";
    private decimal? currentBalance;
    private string? userId;
    private bool isAdmin = false;
    private ClaimsPrincipal? user;
    private string UserName;
    private decimal InvestmentAmount;
    private decimal InvestmentProfit;
    private string _avatarUrl = "https://ymzpnhfzzfkopqvrudiz.supabase.co/storage/v1/object/sign/avatar/avatar.svg?token=eyJraWQiOiJzdG9yYWdlLXVybC1zaWduaW5nLWtleV9jNTBhNTJhOS1kMzYyLTRjMWUtOGMyNi0wNDM3Yjg2ZTIwYzkiLCJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJhdmF0YXIvYXZhdGFyLnN2ZyIsImlhdCI6MTc1MDY3NzcyNSwiZXhwIjoxNzgyMjEzNzI1fQ.nooWtvyI88n56xp0E0cANLdW2WznFL-9HpRnOuQVMUA"; // URL по умолчанию
    private string? _userEmail;
    private string? _userName;
    private string? _email;
    private List<Budget> userCards = new();
    private bool isLoading = true;
    private bool showAddCardModal = false;
    private string newCardDescription = "";
    private decimal newCardAmount = 0;

    public class UserData
    {
        public string Name { get; set; }
        public decimal Investments { get; set; }
        public decimal MonthlyProfit { get; set; }
        public string Email { get; set; }
        public string AvatarUrl { get; set; }
    }
     public class Stock
    {
        public string Name { get; set; }
        public string Ticker { get; set; }
        public decimal Price { get; set; }
        public decimal ChangePercent { get; set; }
    }

    public class StockTransaction
    {
        public string StockName { get; set; }
        public string Ticker { get; set; }
        public int Quantity { get; set; }
        public decimal Price { get; set; }
        public decimal Profit { get; set; }
    }

    [Inject]
    private Supabase.Client? Supabase { get; set; }


    // Методы навигации
    private void NavigateToHistory() => Navigation.NavigateTo("/history");
    private void NavigateToTransfers() => Navigation.NavigateTo("/transfers");
    private void NavigateToInvestments() => Navigation.NavigateTo("/investments");
    private void NavigateToAdmin() => Navigation.NavigateTo("/admin");
    private void OpenSettings() => Navigation.NavigateTo("/settings");
    private void NavigateToMain() => Navigation.NavigateTo("/main");
    private void NavigateToAccount() => Navigation.NavigateTo("/account");

    private async Task Logout()
    {
        if (AuthenticationStateProvider is CustomAuthStateProvider customProvider)
        {
            await customProvider.LogoutAsync();
        }
        Navigation.NavigateTo("/login");
    }


    //логика
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;
        await ProcessAuthState(authState);

        // Загрузка данных пользователя
        var userData = await GetCurrentUserAsync();
        if (userData != null)
        {
            UserName = userData.Name;
            InvestmentAmount = userData.Investments;
            InvestmentProfit = userData.MonthlyProfit;
        }
    }

    private List<Stock> popularStocks = new()
    {
        new Stock { Name = "Apple", Ticker = "AAPL", Price = 180.50m, ChangePercent = 2.5m },
        new Stock { Name = "Газпром", Ticker = "GAZP", Price = 210.75m, ChangePercent = -1.8m },
        new Stock { Name = "VK", Ticker = "VKCO", Price = 660.30m, ChangePercent = 4.1m }
    };

    private List<StockTransaction> stockTransactions = new()
    {
        new StockTransaction { StockName = "Apple", Ticker = "AAPL", Quantity = 5, Price = 180m, Profit = 150m },
        new StockTransaction { StockName = "Газпром", Ticker = "GAZP", Quantity = 10, Price = 200m, Profit = -80m }
    };

    private void ShowBuyStockModal(Stock stock)
    {
        // Реализация модального окна покупки акций
        Console.WriteLine($"Покупка акции: {stock.Ticker}");
    }

   
    private async Task ProcessAuthState(AuthenticationState authState)
    {
        user = authState.User;

        if (user.Identity is { IsAuthenticated: true })
        {
            userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            _userEmail = user.FindFirst(ClaimTypes.Email)?.Value; // Получаем email пользователя

            // Получаем роль из claims
            var roleClaim = user.FindFirst(ClaimTypes.Role)?.Value;
            isAdmin = roleClaim == "1";

            await JSRuntime.InvokeVoidAsync("console.log",
                $"User ID: {userId}, Role: {roleClaim}, IsAdmin: {isAdmin}");

            if (!string.IsNullOrEmpty(userId))
            {
                await LoadUserBalance();
                await LoadUserData();
            }
        }
        else
        {
            isAdmin = false;
            await JSRuntime.InvokeVoidAsync("console.log", "Пользователь не авторизирован");
        }

        StateHasChanged();
    }
    private async Task LoadUserData()
    {
        try
        {
            var response = await Http.GetAsync($"api/UserAccount/{userId}/with-avatar");
            if (response.IsSuccessStatusCode)
            {
                var userData = await response.Content.ReadFromJsonAsync<UserData>();

                // Инициализируем значения по умолчанию для null
                _userName = userData?.Name ?? string.Empty;
                _email = userData?.Email ?? string.Empty;

                // Используем URL аватарки из базы данных или fallback
                _avatarUrl = userData?.AvatarUrl ?? "https://placehold.co/40";

                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка загрузки данных пользователя: {ex.Message}");
            _avatarUrl = "https://placehold.co/40";
            _userName = string.Empty;
            _email = string.Empty;
            StateHasChanged();
        }
    }

    private async Task<bool> CheckIfAvatarExists(string fileName)
    {
        if (Supabase == null) return false;

        try
        {
            var list = await Supabase.Storage
                .From("avatar")
                .List();

            return list.Any(f => f.Name == fileName);
        }
        catch
        {
            return false;
        }
    }


    private async Task LoadUserBalance()
    {
        try
        {
            var response = await Http.GetAsync($"api/Budget/users/{userId}/cards-total");
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadFromJsonAsync<CardsTotalResponse>();
                currentBalance = content?.Total ?? 0;
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Ошибка загрузки баланса: {ex.Message}");
        }
        finally
        {
            StateHasChanged();
        }
    }

    private class CardsTotalResponse
    {
        public decimal Total { get; set; }
    }



    private async Task<UserData> GetCurrentUserAsync()
    {
        try
        {
            var response = await Http.GetAsync($"api/UserAccount/{userId}");
            if (response.IsSuccessStatusCode)
            {
                return await response.Content.ReadFromJsonAsync<UserData>();
            }
            await JSRuntime.InvokeVoidAsync("console.error", $"Ошибка: {response.StatusCode}");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Ошибка: {ex.Message}");
        }
        return null;
    }

}